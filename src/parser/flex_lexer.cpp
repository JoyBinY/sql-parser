#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1152] =
    {   0,
        0,    0,  161,  161,    2,    2,  165,  163,    4,    4,
      163,  163,  152,  159,  152,  152,  156,  152,  152,  152,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  152,  161,  162,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  147,    0,    1,    0,
      154,  153,  156,  149,  148,  146,  150,  158,  158,  158,

      158,  158,  158,  125,  158,  126,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      127,  158,  158,  128,  129,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  130,  131,  132,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  133,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  151,  161,  160,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  157,    0,  153,  113,  158,  114,  158,  158,
      115,  158,  116,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  137,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  117,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  118,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  119,  158,  158,  120,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  121,  158,  158,  122,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  123,  158,  158,  158,  158,  158,  158,
      158,  158,  124,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        0,  158,  158,  158,  158,  158,  158,  158,   83,  158,
       84,   46,   85,  158,  158,  158,   86,  158,  158,   87,
      158,  158,  158,  158,  158,   89,  158,  158,  158,   90,
       91,  158,  158,  158,  158,  158,  158,  158,   92,  158,
      158,   93,   94,  158,  158,   95,  158,   96,  136,  158,
      158,  158,  158,  158,  158,   97,  158,   98,   99,  100,
      158,  102,  158,  103,  158,  158,  158,  158,  104,  158,
      158,  158,  158,  158,  105,  158,  158,   34,  158,  158,
      158,  158,  158,  158,  158,  106,  158,  158,  158,  158,
      107,  108,   32,  158,  140,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  110,  158,  111,  158,  112,  139,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,   63,   64,  158,   65,  158,  143,  158,  158,  158,
      158,  158,  158,  158,   66,  158,  158,  158,  158,  158,
       67,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  141,   68,  158,  158,   69,  158,  101,  158,   70,
       71,  158,  158,  158,  158,   72,   73,   74,   75,  158,
      138,  158,  158,  158,   76,   77,  158,  158,  158,  158,
      158,   78,  158,  158,  158,  158,  158,  158,   79,  158,
      158,  158,  158,   80,  158,  158,  158,   81,  158,  158,

      158,  158,   82,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  158,   36,  158,
      158,  158,   37,  145,  158,   38,  158,  158,  158,  158,

       39,  158,   40,  158,   41,   42,   43,  158,   44,  158,
      158,   47,   48,   49,   50,   51,  158,  158,   52,  135,
      158,  158,   53,  158,  158,  158,   54,  158,  158,   55,
      134,   56,   57,  158,   58,  158,  158,  158,  158,   59,
       60,   61,   62,  158,  158,  158,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,   15,   16,   17,
      158,   18,   19,  158,  158,   33,   20,  158,  158,   21,
       22,   45,   23,  158,   24,  158,  158,   25,   26,  158,
      158,   27,   28,  158,  158,  158,  158,   29,   31,   35,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  158,   88,  158,   10,   11,
      158,   12,  158,   13,  144,  158,  158,  158,   14,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    0,   30,  158,    7,  158,    8,
        9,  158,    2,    2,    2,    2,    2,    2,    2,    2,
        0,    5,    6,  158,    2,    2,    2,    2,    0,  142,
        2,    2,    0,    2,    0,    2,    0,    2,    0,    2,
        0,    2,    0,    2,    0,    2,    0,    2,  155,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1159] =
    {   0,
        0,    0,  720,  709,   76,    0,  688, 4601,  151,  153,
      647,    0, 4601, 4601,  149,  148,  160,  159,  643,  625,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  307,  350,
      284,  221,  258,  171,  564,    0,  609,    0,  295,  308,
      586,  576,    0,    0,  331,  408,  419,  321,  542,  512,
      438,  514,  568,  620,  668,  720,  328,  426,  768,  329,
      311,  434,  500,  820,  868,  505,  421,  513,  918,  970,
      515,  570,  455,  423,  450,  351, 4601,  520, 4601,  512,
     1035, 1045, 1056, 4601, 4601, 4601, 4601,    0,  174,  282,

      336,  520,  296,  315,  557,    0,  345,  334,  568,  511,
      327,  611,  570,  345,  419,  421,  441,  444,  631,  469,
      515,  520,  542,  555,  560,  559,  563,  609,  578,  605,
        0,  618,  616,  665,  619,  628,  618,  643,  664,  685,
      650,  657,  667,  663,  669,  678,  690,  691,    0,  697,
      683,  704,  722,  722,  750,  726,  722,  728,  764,  724,
      725,  743,  773,  764,  774,  770,  769,  796,  777,  788,
      786,  787,  818,  822,  808,  828, 4601,    0, 4601,    0,
      389,    0,  512,    0,  499, 1066, 1076, 1087,    0,    0,
        0,    0,  826,  835,  856,  859,  913,  887,  872,  922,

      905,  961,  962, 1080,  957, 1081, 1133, 1085, 1119, 1083,
     1097, 1122, 1143, 1193, 1145, 1175, 1178,  959, 1196, 1187,
     1217, 1219, 1228, 1232, 1183, 1137, 1247, 1238, 1296, 1253,
     1257, 1270, 1281, 1306, 1331, 1335, 1298, 1350, 1346, 1349,
     1365, 1383, 1380, 1374, 1405, 1402, 1413, 1415, 1414, 1450,
     1454, 1448, 1469, 1478, 1480, 1502, 1508, 1513, 1524, 1389,
     1518, 1519, 1552, 1554, 1563, 1573, 1596, 1567, 1467, 1591,
     1602,    0, 4601,  498, 1667,    0,  825,    0,  833,  831,
        0,  852,    0,  880,  916,  908,  937, 1619,  963,  962,
      979, 1067, 1066, 1154, 1140, 1159,    0, 1166, 1181, 1240,

     1315, 1262, 1286, 1277, 1296, 1325, 1344,    0, 1364, 1368,
     1422, 1410, 1432, 1444, 1451, 1479, 1513, 1515, 1570, 1579,
     1600, 1592, 1609, 1611, 1606, 1624, 1634, 1631, 1645, 1647,
     1660, 1663, 1646, 1656,    0, 1651, 1669, 1666, 1672, 1679,
     1674, 1675, 1662, 1664, 1664,    0, 1674, 1669, 1669, 1684,
     1685, 1690, 1679, 1680, 1686, 1688, 1703, 1686, 1711, 1709,
     1717, 1709, 1720,    0, 1705, 1709, 1710, 1720, 1718, 1715,
     1722, 1732,    0, 1724, 1736, 1725, 1724, 1742, 1730, 1724,
     1750, 1724, 1734, 1764, 1750, 1742,    0,  495, 1800, 1774,
     1778, 1779, 1793, 1795, 1796, 1807, 1808, 1831, 1832, 1819,

     1849, 1847, 1857, 1865, 1853, 1871, 1875, 1903, 1887, 1890,
     1905, 1909, 1911, 1924, 1933, 1941, 1935, 1949, 1957, 1959,
     1945, 1963, 1978, 1967, 1995, 1989, 2011, 1999, 2007, 2008,
     2017, 2033, 2043, 2049, 2062, 2057, 2071, 2061, 2052, 2093,
     2097, 2075, 2087, 2105, 2111, 2116, 2119, 2128, 2127, 2141,
     2145, 2167, 2150, 2173, 2179, 2182, 2185, 2195, 2203, 2204,
     2218, 2221, 2213, 2216, 2235, 2253, 2247, 2258, 2264, 2259,
     2275, 2277, 2287, 2281, 2289, 2303, 2312, 2318, 2326, 2327,
     2337, 2341, 2356, 2343, 2372, 2335, 2360, 2377, 2389, 2400,
     2391, 2406, 2414, 2415, 2432, 2445, 2440, 2464, 2448, 2456,

      491, 1798, 1804, 1813, 1899, 1960, 1993, 2023,    0, 2119,
        0,    0, 2155, 2151, 2176, 2177,    0, 2336, 2352, 2380,
     2410, 2435, 2438, 2451, 2475, 2461, 2482, 2481, 2479,    0,
        0, 2477, 2478, 2478, 2482, 2503, 2506, 2505,    0, 2491,
     2512,    0,    0, 2513, 2499,    0, 2505,    0,    0, 2517,
     2505, 2500, 2507, 2509, 2521,    0, 2518,    0,    0,    0,
     2512,    0, 2521,    0, 2530, 2524, 2528, 2527,    0, 2544,
     2543, 2535, 2538, 2545,    0, 2560, 2563,    0, 2552, 2549,
     2548, 2567, 2560, 2562, 2574,    0, 2573, 2570, 2576, 2567,
        0,    0, 2565, 2567,    0, 2584, 2575, 2569, 2592, 2577,

     2591, 2594, 2593, 2593,    0, 2586,    0, 2605,    0,    0,
      474, 2613, 2614, 2610, 2616, 2618, 2635, 2622, 2639, 2650,
     2647, 2648, 2656, 2664, 2681, 2680, 2678, 2689, 2710, 2702,
     2706, 2715, 2718, 2732, 2743, 2755, 2756, 2760, 2777, 2758,
     2769, 2788, 2798, 2794, 2786, 2823, 2831, 2773, 2812, 2829,
     2842, 2840, 2848, 2857, 2852, 2861, 2873, 2874, 2883, 2885,
     2898, 2896, 2906, 2914, 2935, 2897, 2929, 2931, 2939, 2940,
     2950, 2952, 2973, 2968, 2969, 2990, 2971, 3006, 2994, 3024,
     3003, 3025, 3027, 3028, 3039, 3060, 3061, 3042, 3070, 3079,
     3076, 3101, 3102, 3073, 3113, 3104, 3112, 3130, 3115, 3136,

     3127, 3144, 3152, 3155, 3158, 3167, 3180, 3168, 3190, 3203,
     3204, 3181, 3209, 3221, 3220, 3222, 3226, 3234, 3235, 3243,
      442,    0,    0, 2666,    0, 2692,    0, 2721, 2865, 2888,
     2948, 2966, 2975, 3002,    0, 3054, 3058, 3118, 3109, 3170,
        0, 3228, 3229, 3248, 3258, 3260, 3249, 3251, 3258, 3270,
     3277,    0,    0, 3261, 3270,    0, 3276,    0, 3264,    0,
        0, 3265, 3283, 3272, 3281,    0,    0,    0,    0, 3289,
        0, 3296, 3291, 3280,    0,    0, 3296, 3284, 3285, 3300,
     3304,    0, 3313, 3315, 3313, 3299, 3318, 3322, 3306, 3313,
     3313, 3333, 3334,    0, 3331, 3333, 3333,    0, 3320, 3341,

     3331, 3346,    0,  441, 3343, 3346, 3351, 3348, 3354, 3362,
     3365, 3377, 3386, 3387, 3400, 3408, 3402, 3405, 3417, 3416,
     3450, 3431, 3439, 3440, 3468, 3454, 3462, 3456, 3480, 3490,
     3491, 3494, 3516, 3504, 3492, 3522, 3525, 3546, 3528, 3554,
     3530, 3544, 3558, 3562, 3579, 3568, 3570, 3596, 3587, 3592,
     3598, 3600, 3602, 3604, 3632, 3633, 3641, 3637, 3638, 3642,
     3654, 3673, 3650, 3671, 3672, 3707, 3708, 3696, 3690, 3725,
     3733, 3744, 3746, 3721, 3742, 3761, 3747, 3750, 3776, 3778,
     3779, 3787, 3804, 3809, 3815, 3790,  435, 3352,    0, 3374,
     3430, 3519, 3594,    0, 3606,    0, 3674, 3689, 3705, 3777,

        0, 3798,    0, 3814,    0,    0,    0, 3813,    0, 3807,
     3805,    0,    0,    0,    0,    0, 3808, 3830,    0,    0,
     3825, 3837,    0, 3826, 3844, 3826,    0, 3851, 3852, 3838,
        0,    0,    0, 3846,    0, 3858, 3859, 3860, 3846,    0,
        0,    0,    0, 3850, 3862, 3858,  434, 3866, 3867, 3869,
     3875, 3883, 3897, 3899, 3900, 3901, 3915, 3931, 3932, 3940,
     3937, 3968, 3943, 3971, 3953, 3954, 3977, 3983, 3985, 3993,
     3994, 3999, 4007, 4008, 4011, 4017, 4039, 4022, 4023, 4033,
     4056, 4051, 4045, 4062, 4048, 4061, 4067, 4093, 4099, 4096,
     4085, 4101, 4102, 4127, 4111, 4139, 4145, 4144, 4136, 4130,

     4133, 4155, 4167, 4176, 4179, 4190,  429,    0,    0,    0,
     3906,    0,    0, 3909, 3922,    0,    0, 3949, 3974,    0,
        0,    0,    0, 4059,    0, 4060, 4125,    0,    0, 4158,
     4178,    0,    0, 4172, 4180, 4178, 4195,    0,    0,    0,
      404, 4198, 4201, 4207, 4209, 4213, 4219, 4230, 4235, 4232,
     4241, 4243, 4249, 4247, 4251, 4253, 4265, 4283, 4275, 4284,
     4286, 4287, 4289, 4305, 4315, 4299, 4317, 4338, 4341, 4339,
     4323, 4340, 4353, 4355,  402, 4288,    0, 4303,    0,    0,
     4314,    0, 4344,    0,    0, 4343, 4358, 4367,    0,  401,
     4379, 4374, 4389, 4383, 4391, 4393, 4395, 4412, 4397, 4407,

     4423, 4437, 4429, 4441,  397,    0, 4428,    0, 4431,    0,
        0, 4436,  396, 4447, 4451, 4462, 4463, 4465, 4466, 4481,
      383,    0,    0, 4444,  382, 4479, 4487, 4496,  376,    0,
      342, 4495,  333,  331,  303,  291,  278,  255,  250,  245,
      243,  240,  235,  221,  226,  197,  187,  173, 4601,    0,
     4601, 4570, 4575,  181, 4580, 4585, 4590, 4595
    } ;

static const flex_int16_t yy_def[1159] =
    {   0,
     1151,    1, 1152, 1152, 1151,    5, 1151, 1151, 1151, 1151,
     1151, 1153, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1151, 1155, 1151, 1156, 1156, 1151,
     1156, 1157, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1158, 1158,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1156, 1151, 1151, 1153, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1151, 1155, 1151, 1156,
     1156, 1156, 1157, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1156, 1151, 1151, 1151, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1156, 1156, 1156,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1151, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1156,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1151, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1156,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1151, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1156,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62, 1151, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1156,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1151, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1156,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1151, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1156,   62,   62,   62,   62,   62,   62,   62,
     1151, 1154, 1154, 1154, 1156,   62,   62,   62, 1151, 1154,
     1156,   62, 1151, 1156, 1151, 1156, 1151, 1156, 1151, 1156,
     1151, 1156, 1151, 1156, 1151, 1156, 1151, 1156, 1151, 1156,
        0, 1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

static const flex_int16_t yy_nxt[4678] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1150,  102,  113,  108,  137,  103,  104,  176,  114,  276,

      109,  115,  106,  110, 1149,  116, 1148,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  176,  114,  276,  109,  115,  106,
      110,  126,  116,  128,  117, 1147,  138,  127, 1146,  118,
      139,  129,  131,  172,  119,  120,  140,  130,  132,  133,
      134,  173, 1145,  121, 1144,  135,  122, 1143,  126,  123,
      128, 1142,  124,  138,  127,  125, 1141,  139,  129,  131,
      172, 1140,  120,  140,  130,  132,  133,  134,  173,  144,
      121,  141,  135,  122,  152,  142,  123,  174,  175,  124,
      148,  143,  125,  145, 1139,  153,  181,   86,  149,  146,

      147,  154,  150,  155, 1138,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  174,  175, 1137,  148,  143,  169,
      145,  170,  153,  277,  171,  149,  146,  147,  154,  150,
      155,  158,  151,  159,  156,  282,  160,  232,  184,  283,
      157,  189,  190,  161,  162, 1136,  169, 1135,  170,  185,
      277,  171,   86,   86,  193,  193,  289,  193,  158, 1134,
      159,  221,  282,  160,  232,  231,  283,  222,  296,  278,
      161,  162,  163,  297,  193,  193,  164,  279,  287,  165,
      166,  193,  193,  289,  193,  288,  167,  305,  221,  168,
      181,   86,  231, 1133,  222,  296,  278, 1131, 1129,  163,

      297,  193,  193,  164,  279,  287,  165,  166, 1125, 1121,
     1113, 1105,  288,  167,  305, 1090,  168,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  180,  180,
     1075,  180,  180,  180,  180,  180,  180,  193,  223,  271,
     1041, 1007,  193,  947,  887,  306,  224,  180,  180,  180,
      233,  307,  225,  194,  234,  195,  308,  193,  309,  193,
      235,  196,  193,  197,  193,  223,  271,  198,  199,  193,
      193,  193,  306,  224,  269,  270,  804,  233,  307,  225,
      194,  234,  195,  308,  193,  309,  193,  235,  196,  193,

      197,  193,  315,  721,  198,  199,  611,  193,  193,  501,
      388,  269,  270,  180,  180,  180,  387,  180,  180,  180,
      180,  180,  180,  274,  273,  272,  236,  247,  193,  315,
      237,  193,  192,  180,  180,  180,  238,  294,  248,  250,
      200,  193,  280,  251,  249,  281,  193,  295,  316,  252,
      264,  193,  265,  236,  247,  266,  317,  237,  193,  193,
      201,  193,  191,  238,  294,  248,  250,  200,  193,  280,
      251,  249,  281,  193,  295,  316,  252,  264,  193,  265,
      180,  318,  266,  317,  284,  285,  193,  201,  193,  180,
      202,  319,  267,  320,  193,  321,  193,  203,  286,  322,

      268,  290,  291,  292,  204,  293,  182,  205,  318,  303,
      304,  284,  285,  325,  193,  179,  193,  202,  319,  267,
      320,  193,  321,  193,  203,  286,  322,  268,  290,  291,
      292,  204,  293,  298,  205,  299,  303,  304,  300,  177,
      325,  193,  206,  193,  301,   97,  207,  326,  327,  323,
      208,  302,  324,  328,  333,  310,  209,  311,  334,  210,
      298,  312,  299,   96,  335,  300,  193,   87,  313,  206,
      336,  301,  314,  207,  326,  327,  323,  208,  302,  324,
      328,  333,  310,  209,  311,  334,  210, 1151,  312,  342,
      329,  335,  343,  193,  193,  313,  337,  336,  338,  314,

      330,  211,  344,  212,  345,  331,  332,  339,  213,  340,
      346,  347,  348,  214,  193,   47,  342,  329,  349,  343,
      341,  193,  350,  337,  351,  338,   47,  330,  211,  344,
      212,  345,  331,  332,  339,  213,  340,  346,  347,  348,
      214,  193,  215,  352,  353,  349,  193,  341,  354,  350,
      216,  351,  355,  217,  359,  360,  218,  361, 1151,  219,
      365, 1151,  220, 1151,  366,  367,  193, 1151, 1151,  215,
      352,  353,  356,  193, 1151,  354, 1151,  216, 1151,  355,
      217,  359,  360,  218,  361,  357,  219,  365,  362,  220,
      358,  366,  367,  193,  193,  226,  368,  363,  369,  356,

      371,  227,  228,  229,  372,  364,  373,  376,  230,  370,
      377, 1151,  357,  378,  193,  362,  379,  358,  374, 1151,
      380,  193,  226,  368,  363,  369,  381,  371,  227,  228,
      229,  372,  364,  373,  376,  230,  370,  377,  375, 1151,
      378,  193,  239,  379,  382,  374,  193,  380,  384,  385,
      386,  502,  193,  381, 1151, 1151,  240,  383, 1151,  503,
      390,  193,  241,  242,  504,  375,  193, 1151, 1151,  239,
     1151,  382,  193,  193,  505,  384,  385,  386,  502,  193,
     1151,  193,  193,  240,  383,  193,  503,  390,  193,  241,
      242,  504,  392,  193,  193,  243,  397,  391,  193,  193,

      393,  505,  193,  244, 1151,  193, 1151,  245,  193,  193,
      246, 1151,  193,  193,  193, 1151,  506, 1151,  193,  392,
     1151,  193,  243,  397,  391,  193,  396,  393, 1151,  193,
      244,  193,  193,  193,  245,  394, 1151,  246,  395,  193,
      193,  193,  253,  506,  254,  193,  507,  255,  193,  398,
      399,  193,  508,  396,  256,  257, 1151, 1151,  193,  193,
      193, 1151,  394,  400,  193,  395,  193, 1151,  193,  253,
      509,  254, 1151,  507,  255,  193,  398,  399,  193,  508,
     1151,  256,  257,  408,  403,  193,  193,  193,  193, 1151,
      400,  193,  258,  409,  401,  193,  259,  509,  432,  260,

      261,  402,  513,  193,  514,  193,  262,  193,  193,  263,
      408,  403,  193,  515,  193,  193,  193, 1151, 1151,  258,
      409,  401, 1151,  259, 1151,  432,  260,  261,  402,  513,
      193,  514,  193,  262,  193,  193,  263, 1151, 1151, 1151,
      515, 1151, 1151,  193,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  187,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  193,  193,  516,  193,
     1151,  193,  517,  404,  405,  406, 1151,  407, 1151,  420,
     1151, 1151,  410,  193,  417,  418,  193,  411, 1151,  193,
     1151,  193, 1151,  193,  193,  516,  193,  421,  193,  517,
      404,  405,  406,  193,  407,  193,  420,  422,  193,  410,
      193,  417,  418,  193,  411,  412,  193,  413,  193,  193,
      414,  419, 1151,  193,  421,  193,  415,  423,  193,  193,
      193,  193,  193,  416,  422,  193,  518, 1151,  429,  193,
      519, 1151,  412,  193,  413,  520,  193,  414,  419,  193,
      193,  193,  193,  415,  423,  193,  193, 1151,  193,  521,

      416,  193, 1151,  518,  193,  429,  193,  519,  430,  193,
      193,  522,  520,  193,  431, 1151,  193,  424,  193,  425,
      434,  193,  193,  426,  193,  440,  521, 1151,  193,  193,
      427,  193,  433,  193,  428,  430,  193, 1151,  522,  193,
      193,  431,  193,  193,  424,  193,  425,  434,  193,  193,
      426,  193,  440,  435,  193,  436,  193,  427,  193,  433,
      193,  428,  523,  193,  193,  193,  193,  439,  437,  193,
      193,  438,  193,  193,  193,  442, 1151,  441,  193,  193,
      435,  193,  436,  193,  193,  193,  526,  448,  447,  523,
      193,  193,  193,  193,  439,  437,  193, 1151,  438,  193,

      193,  193,  442,  193,  441,  193,  193,  193,  450, 1151,
      193,  193,  527,  526,  448,  447,  449, 1151,  528,  529,
      193,  443,  193,  193,  193, 1151,  193,  193, 1151, 1151,
      193,  444,  193,  457,  193,  450,  445,  446,  451,  527,
      452,  524,  193,  449,  193,  528,  529, 1151,  443,  193,
     1151,  193,  193,  453,  193,  454,  525,  193,  444,  193,
      457,  193,  530,  445,  446,  451,  455,  452,  524,  193,
      531,  193,  193, 1151,  456,  193,  193,  193, 1151,  193,
      453,  193,  454,  525,  193,  458,  532,  459,  193,  530,
      460,  193,  193,  455,  533,  193,  193,  531,  461,  193,

      193,  456,  193,  193,  193,  462,  193,  463,  193,  193,
     1151,  193,  458,  532,  459,  485, 1151,  460,  193,  193,
      193,  533,  193,  193, 1151,  461,  193,  193,  193,  193,
      464,  193,  462,  193,  463,  193,  193,  467,  193,  193,
      468,  193,  485,  465,  469, 1151,  534,  193,  193, 1151,
      535,  193,  466,  193, 1151,  193,  193,  464,  193,  193,
      193,  193,  193, 1151,  467,  536,  193,  468,  193, 1151,
      465,  469,  470,  534,  193,  193,  193,  535,  193,  466,
      193,  474,  473,  537, 1151,  471,  193,  193,  193, 1151,
      472,  538,  536,  498,  193,  193,  193, 1151,  475,  470,

      193,  193,  476,  193,  193,  539,  193,  193,  474,  473,
      537,  477,  471,  193, 1151,  193,  479,  472,  538,  478,
      498,  193,  193,  193,  193,  475,  193,  193,  193,  476,
      481,  193,  539,  193,  193,  540,  482, 1151,  477,  193,
      193,  480,  193,  479,  193,  193,  478, 1151,  193,  541,
      193,  193,  486,  193,  193,  193,  487,  481,  483,  193,
     1151,  193,  540,  482,  193,  193,  193, 1151,  480,  484,
      193,  193,  193, 1151,  488,  193,  541,  193,  193,  486,
      193,  193, 1151,  487,  490,  483,  193,  491,  492,  193,
     1151,  193,  193,  496,  489, 1151,  484,  193,  193,  193,

      193,  488, 1151,  493,  542,  193,  497,  193, 1151,  193,
     1151,  490,  543,  193,  491,  492,  193,  193, 1151,  193,
      496,  489,  193,  544,  500,  193,  193,  193,  193,  494,
      493,  542,  499,  497,  545,  495,  193,  193,  546,  543,
      193,  547,  193,  510,  193,  511,  193,  548,  193,  193,
      544,  500, 1151, 1151, 1151,  193,  494, 1151, 1151,  499,
      512,  545,  495,  549,  193,  546,  550,  551,  547,  193,
      510,  552,  511,  553,  548,  193,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  554,  512,  557,  555,
      549,  558,  559,  550,  551,  560,  561,  562,  552,  556,

      553,  563,  564,  565,  566,  567,  568,  569,  570,  571,
      572,  573,  574,  554,  575,  557,  555,  576,  558,  559,
      577,  578,  560,  561,  562,  579,  556,  580,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      581,  575,  582,  583,  576,  584,  585,  577,  578,  586,
      587,  588,  579,  589,  580,  590,  591,  592,  593,  594,
      599,  597,  595,  598,  600,  601,  602,  581,  605,  582,
      583,  596,  584,  585,  603,  606,  586,  587,  588,  609,
      589,  610,  590,  591,  592,  593,  594,  599,  597,  595,
      598,  600,  601,  602, 1151,  605,  604, 1151,  596,  607,

      193,  603,  606,  608,  612,  193,  609, 1151,  610,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  613,
      193,  193,  193,  604,  193,  193,  607,  193,  614,  615,
      608,  612,  193,  193,  193, 1151, 1151,  722, 1151,  193,
     1151,  193,  193,  723, 1151,  193,  613,  193,  193,  193,
     1151,  193,  193,  193,  193,  614,  615,  193,  193,  724,
      193,  193,  617,  618,  722,  193,  193,  616,  193,  193,
      723,  620,  193,  621, 1151,  193, 1151,  193,  193,  193,
      193,  193,  619,  193,  193,  193,  724,  625,  622,  617,
      618,  193,  193,  193,  616,  193,  623,  193,  620,  193,

      621,  193,  193,  193,  193,  193,  193,  624, 1151,  619,
      193,  193,  626,  193,  625,  622,  630,  193,  193, 1151,
      193,  627,  193,  623,  193,  628,  193,  629,  193,  193,
      193,  193, 1151,  193,  624,  193,  193,  193,  193,  626,
      193,  632,  631,  630,  193,  725,  633, 1151,  627,  193,
      193,  193,  628, 1151,  629,  193,  193,  193,  193,  634,
      193,  637,  193,  193,  193,  636, 1151,  193,  632,  631,
      193,  641,  725,  633,  635,  193,  193,  193,  193,  193,
      639,  193,  193,  193,  193,  193,  634,  193,  637,  193,
      638,  193,  636,  643,  193,  193,  640,  193,  641,  726,

      642,  635,  193,  193,  193,  193,  193,  639,  193,  193,
      193, 1151,  193,  193,  193,  193,  193,  638,  193,  644,
      643,  193,  193,  640,  193,  193,  726,  642,  727,  645,
      193,  193,  193,  193,  649,  193,  193,  193,  647,  650,
      193,  193,  193,  193,  646,  193,  644,  648,  193,  728,
     1151,  193,  193,  193,  193,  727,  645,  193, 1151,  193,
      193,  649,  193,  193,  193,  647,  650,  651,  193,  193,
      193,  646,  193, 1151,  648,  193,  728,  652,  193,  193,
      193,  193,  653,  193,  193,  654,  193,  193,  193,  193,
      193,  657, 1151,  658,  651,  193,  193,  193,  193,  655,

      656,  193,  193,  193,  652,  193,  193,  193,  193,  653,
      193,  661,  654,  662,  193,  193,  193,  193,  657,  193,
      658,  193,  193,  193,  193,  193,  655,  656,  193,  660,
      193,  663,  659,  193,  193,  193, 1151,  664,  661,  193,
      662,  729,  665,  193,  193,  193,  193, 1151,  193, 1151,
      193,  193,  666,  193,  193, 1151,  660,  193,  663,  659,
      193,  667,  193,  668,  664,  193,  193,  193,  729,  665,
      193,  670,  193,  193,  193,  672,  193,  730,  193,  666,
      193,  193,  669, 1151,  193,  731, 1151,  193,  667,  193,
      668,  193,  193,  193,  193,  673,  193,  671,  670,  193,

      193,  193,  672,  193,  730,  193,  732,  674,  193,  669,
      675,  193,  731,  193,  193, 1151,  733, 1151,  193,  193,
      193,  193,  673,  193,  671,  193,  193,  676,  193,  193,
      193,  193,  193,  732,  674,  193,  677,  675,  193,  193,
      193,  193,  682,  733,  193,  678,  193,  193,  193,  193,
      193,  679,  193,  681,  676,  193,  193,  193,  193,  193,
      680,  683,  193,  677,  193, 1151,  193,  193,  193,  682,
     1151,  193,  678,  193,  193,  684,  193,  193,  679,  193,
      681,  193,  685, 1151,  193,  193,  193,  680,  683,  193,
      193,  193,  688,  193,  193,  686, 1151,  689,  687,  193,

      193,  193,  684,  193,  193,  193,  193,  193,  193,  685,
      193,  193,  193,  193,  692,  693,  691,  193,  690,  688,
      193,  193,  686,  193,  689,  687,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193, 1151,  193,  695,  694,
      193,  692,  693,  691,  193,  690, 1151, 1151,  193,  193,
      193, 1151,  193,  193,  193, 1151,  193, 1151,  193, 1151,
      193,  703,  193,  193,  193,  695,  694,  193,  697,  193,
      696,  193,  193,  193,  699, 1151,  193,  734,  698,  193,
      193,  193,  193,  193,  701,  193,  193,  193,  703,  193,
      193,  193,  735,  700,  193,  697,  193,  696,  193,  193,

      193,  699,  193,  193,  734,  698,  193,  702,  193,  193,
      193,  701,  704,  193,  193,  705,  193,  193,  193,  735,
      700,  736, 1151,  193,  706,  193,  193,  709,  710,  193,
      193, 1151,  193,  193,  702,  193,  707,  193,  708,  704,
      193,  193,  705,  737,  193,  193,  193, 1151,  736,  711,
      193,  706,  193,  193,  709,  710,  713,  712,  193,  193,
      193,  193,  193,  707,  193,  708,  193,  193,  193,  738,
      737,  193, 1151,  193,  193, 1151,  711,  719,  714,  193,
      739,  716,  193,  713,  712,  193,  193,  193,  193,  715,
      193,  193,  740,  193,  193,  720,  738,  741,  193,  717,

      742,  193,  193,  718,  719,  714,  743,  739,  716,  193,
      193,  744,  745,  193,  746,  747,  715,  193,  193,  740,
      748,  193,  720,  749,  741,  750,  717,  742,  751,  193,
      718,  752,  753,  743,  754,  755,  756,  193,  744,  745,
      757,  746,  747,  758,  759,  760,  761,  748,  762,  763,
      749,  765,  750,  766,  767,  751,  768,  771,  752,  753,
      764,  754,  755,  756,  769,  770,  772,  757,  773,  774,
      758,  759,  760,  761,  775,  762,  763,  776,  765,  777,
      766,  767,  778,  768,  771,  779,  780,  764,  781,  782,
      783,  769,  770,  772,  784,  773,  774,  785,  786,  787,

      788,  775,  789,  790,  776,  791,  777,  792,  793,  778,
      794,  795,  779,  780,  796,  781,  782,  783,  797,  798,
      799,  784,  800,  801,  785,  786,  787,  788,  802,  789,
      790,  803,  791, 1151,  792,  793,  193,  794,  795,  193,
      193,  796,  193, 1151,  193,  797,  798,  799,  811,  800,
      801, 1151,  805,  806, 1151,  802,  807,  809,  803,  193,
      193,  193,  808,  193,  193,  193,  193,  193,  193,  193,
      810,  193,  812,  193,  193,  811,  193, 1151,  813,  805,
      806,  193,  193,  807,  809,  193,  193,  193,  193,  808,
      193,  193,  193,  193,  193,  193,  193,  810,  814,  812,

      193,  193,  193,  193,  193,  813,  193,  193,  193,  193,
      193,  815,  193,  888, 1151,  193, 1151,  193,  889,  816,
      193,  193, 1151,  193,  193,  814,  193,  193,  193,  193,
      817,  193,  193,  193,  193,  193,  193,  193,  815,  820,
      888,  193,  193,  819,  193,  889,  816,  890,  193,  821,
      818,  193,  193,  193,  193,  193,  193,  817,  193,  193,
      822,  193,  193,  193,  193,  824,  820, 1151,  193,  193,
      819,  193, 1151,  823,  890,  193,  821,  818,  193,  193,
      826,  193,  193,  193,  193,  193,  193,  822,  193,  193,
      827,  193,  824, 1151,  825,  193,  193, 1151, 1151,  835,

      823,  193,  193,  193,  193,  193,  193,  826,  193,  193,
      828,  193,  193,  193,  193,  193,  193,  827, 1151,  193,
      193,  825,  193,  193,  193,  829,  835,  832,  193,  193,
      193,  193,  193,  193,  193,  830,  831,  828,  193,  193,
      193,  193,  193, 1151,  193,  833,  193,  193, 1151,  193,
      193,  193,  829,  834,  832,  193, 1151,  193,  193,  193,
     1151,  193,  830,  831,  837,  193,  193,  193,  193,  193,
      836,  193,  833, 1151,  193,  193,  193,  193,  193,  838,
      834, 1151,  193,  193,  193,  193,  193,  193,  193,  839,
      891,  837, 1151,  193,  193,  193,  193,  836,  193,  193,

      193,  193,  193,  193,  193,  193,  838,  193,  840,  193,
      193,  841,  892,  193,  193,  193,  839,  891, 1151,  193,
      193,  193,  193,  193,  193,  193,  193,  193, 1151,  193,
      193,  193,  193, 1151,  193,  840,  193,  842,  841,  892,
      193,  843,  193,  193,  193,  844,  193,  193, 1151,  193,
      193,  193,  193,  845, 1151,  193,  193,  193,  193,  193,
      193,  193,  848,  846,  842,  193,  193,  193,  843,  193,
      193,  193,  844, 1151,  847,  193,  193,  193,  193,  193,
      845,  193,  193,  893,  193,  193,  193,  193,  193,  848,
      846,  849,  193,  193,  193,  851,  193,  193,  193,  193,

      854,  847,  193,  193,  193,  193,  850,  894,  193, 1151,
      893,  895,  193,  193,  193,  193,  193,  193,  849,  193,
      193,  193,  851,  193,  193,  193,  193,  854,  896,  857,
      852,  853,  193,  850,  894, 1151,  193, 1151,  895, 1151,
      193,  193,  193,  193,  193,  855,  193,  193,  856,  193,
      193,  193,  193,  193,  193,  896,  857,  852,  853,  193,
     1151, 1151,  860,  193,  858,  193,  859,  193,  193, 1151,
      193,  193,  855,  193,  193,  856,  193,  193,  193,  193,
      193,  193,  861,  862,  897,  193,  193,  193,  193,  860,
     1151,  858,  193,  859,  898,  193,  193,  193,  193,  193,

      193,  193,  193, 1151,  863,  193,  193,  193,  868,  861,
      862,  897,  193,  193,  193,  193,  193,  865,  864,  193,
     1151,  898,  193,  193,  866,  193,  193,  193,  193,  193,
      193,  863,  193,  193,  193,  868,  867,  869,  870,  193,
      899,  872,  900,  193,  865,  864,  193,  193,  193,  193,
      193,  866,  193,  193,  193,  193,  193,  193,  193,  193,
      871,  193,  193,  867,  869,  870,  193,  899,  872,  900,
      193, 1151,  873,  193,  193,  193,  193,  193,  193, 1151,
      193,  193,  193,  193,  193,  193,  193,  871,  193,  193,
      193,  876,  874,  193,  193,  875,  901,  193,  193,  873,

      193,  193, 1151,  193,  193,  193,  193,  882,  193,  193,
      878,  193,  879,  193,  193,  877,  193,  193,  876,  874,
      193,  193,  875,  901, 1151,  193,  193,  193,  193,  193,
      193,  193,  881,  193,  882,  193,  193,  878,  883,  879,
      193,  193,  877,  193,  880, 1151,  193,  193,  193,  193,
      193,  884,  193,  193,  193,  193,  193,  193,  902,  881,
      886,  193,  193,  193,  885,  883,  193,  193,  193,  193,
      903,  880,  193,  193,  193,  193,  193,  193,  884,  193,
      193,  193,  193,  904,  905,  902,  906,  886,  193,  193,
      907,  885,  908,  193,  193,  193,  193,  903,  909,  193,

      910,  911,  912,  913,  914,  915,  916,  193,  193,  917,
      904,  905,  918,  906,  919,  920,  193,  907,  921,  908,
      922,  923,  924,  925,  926,  909,  927,  910,  911,  912,
      913,  914,  915,  916,  928,  929,  917,  930,  931,  918,
      932,  919,  920,  933,  934,  921,  935,  922,  923,  924,
      925,  926,  936,  927,  937,  938,  939,  940,  941,  942,
      943,  928,  929,  944,  930,  931,  945,  932,  946,  193,
      933,  934,  193,  935,  193, 1151, 1151,  193, 1008,  936,
      949,  937,  938,  939,  940,  941,  942,  943,  193,  193,
      944,  950,  193,  945,  193,  946,  193,  193,  948,  193,

      193,  193,  951,  193,  193, 1008, 1151,  949,  193, 1009,
      952,  193,  193,  193, 1151,  193,  193, 1151,  950,  193,
     1151,  193,  953,  193,  193,  948,  193,  193,  956,  951,
      193,  193,  193,  193,  193,  193, 1009,  952,  193,  193,
      193,  954,  193,  193,  955, 1151,  193,  957,  193,  953,
      193,  193,  958,  193,  193,  956, 1010,  193,  193,  193,
      193,  193,  193,  193,  960,  961,  193, 1151,  954,  193,
      193,  955,  959,  193,  957,  193,  193,  193,  193,  958,
      193,  193,  965, 1010,  193,  193,  193, 1151,  193,  193,
      193,  960,  961,  193,  193,  963,  193,  964,  962,  959,

      193, 1151,  193,  193,  193, 1151,  966,  193,  193,  965,
     1151, 1151,  193,  193,  193,  193,  193,  193,  193, 1151,
      193,  193,  963,  193,  964,  962,  193,  193,  971,  193,
      193,  967,  968,  966,  969,  193,  193,  193,  193, 1151,
      193,  193,  193,  193,  193,  193,  970,  193,  193, 1151,
      193,  193, 1151,  193,  193,  971,  193,  193,  967,  968,
     1011,  969,  193,  193,  193,  193,  972,  193,  193,  193,
      193,  193,  193,  970,  193,  193,  193,  193,  193,  973,
      193,  193,  974,  193,  193,  975, 1151, 1011,  193,  193,
      193, 1151,  193,  972,  977,  193,  193,  193,  193,  193,

      193,  193, 1151,  193,  193,  193,  973,  193,  193,  974,
      978,  193,  975,  193,  193,  193,  193,  193,  193,  193,
      976,  977,  193,  193,  193,  193,  193,  193,  980,  979,
      193,  193,  193,  193, 1012,  193, 1151,  978,  193, 1013,
      193,  193,  193,  193,  193,  193,  193,  976,  193,  193,
      193,  193,  193,  193,  981,  980,  979,  193,  193,  193,
      193, 1012,  982,  193,  193,  193, 1013,  193,  984,  193,
     1151,  193, 1151,  193, 1151,  193,  987,  193,  193,  193,
      193,  981,  983,  193,  193,  193,  193,  193,  193,  982,
      193,  193, 1151,  985,  193,  984,  193,  193,  193,  193,

      193,  988, 1151,  987, 1151,  193,  193,  193, 1014,  983,
      193,  193,  986, 1015,  193,  193,  193,  193,  193,  193,
      985,  991,  193,  193,  193,  193,  193,  193,  988,  989,
      990,  992, 1151,  193,  193, 1014,  193, 1151, 1016,  986,
     1015, 1151,  193,  193,  193,  193,  193,  193,  991,  193,
      993,  193, 1151,  193,  193,  994,  989,  990,  992,  193,
      193,  193,  997,  193,  998, 1016, 1151,  193,  193,  193,
      193,  193,  193,  193,  193, 1151, 1000,  993,  193,  193,
      193,  193,  994,  999,  995,  996,  193,  193,  193,  997,
      193,  998,  193,  193,  193,  193,  193,  193,  193,  193,

      193, 1001,  193, 1000, 1002,  193,  193,  193, 1151, 1151,
      999,  995,  996,  193,  193,  193,  193,  193, 1017,  193,
      193, 1018,  193,  193,  193,  193, 1004, 1003, 1001,  193,
      193, 1002,  193,  193,  193,  193,  193, 1006, 1019, 1020,
      193,  193, 1021,  193, 1005, 1017, 1022, 1023, 1018,  193,
      193,  193,  193, 1004, 1003,  193, 1024,  193, 1025, 1026,
      193,  193,  193,  193, 1006, 1019, 1020, 1027,  193, 1021,
     1028, 1005, 1029, 1022, 1023, 1030, 1031,  193, 1032, 1033,
     1034, 1035,  193, 1024, 1036, 1025, 1026, 1037,  193, 1038,
     1039, 1040, 1042,  193, 1027,  193, 1151, 1028, 1151, 1029,

     1151, 1044, 1030, 1031, 1043, 1032, 1033, 1034, 1035,  193,
     1151, 1036,  193,  193, 1037,  193, 1038, 1039, 1040, 1042,
      193,  193,  193,  193, 1045,  193,  193,  193, 1044,  193,
     1151, 1043, 1076, 1047, 1151, 1077,  193, 1046, 1151,  193,
      193,  193,  193,  193, 1078,  193,  193,  193,  193, 1048,
      193, 1045,  193,  193,  193, 1049,  193,  193,  193, 1076,
     1047,  193, 1077,  193, 1046, 1050,  193, 1151,  193,  193,
      193, 1078,  193,  193,  193, 1079, 1048,  193,  193,  193,
      193, 1051, 1049,  193,  193,  193,  193, 1151,  193,  193,
      193, 1052, 1050,  193,  193, 1053,  193,  193, 1151,  193,

      193, 1151, 1079,  193,  193,  193,  193,  193, 1051, 1054,
      193,  193, 1151,  193,  193, 1080,  193,  193, 1052,  193,
      193,  193, 1053,  193,  193,  193,  193,  193, 1055,  193,
      193,  193, 1151,  193,  193, 1056, 1054,  193,  193,  193,
      193,  193, 1080,  193,  193,  193,  193,  193, 1058,  193,
      193, 1151,  193,  193,  193, 1055,  193,  193,  193,  193,
      193,  193, 1056,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193, 1060, 1062, 1058,  193,  193, 1057,  193,
      193,  193,  193, 1081,  193,  193,  193,  193,  193, 1059,
      193,  193,  193,  193,  193,  193,  193,  193,  193, 1082,

     1060, 1062,  193, 1061,  193, 1057,  193, 1063,  193,  193,
     1081,  193,  193,  193,  193,  193, 1059, 1064,  193,  193,
      193,  193,  193, 1065,  193,  193, 1082,  193,  193,  193,
     1061,  193, 1151, 1151, 1063,  193, 1066,  193,  193,  193,
      193, 1151,  193, 1151, 1064,  193,  193,  193,  193,  193,
     1065, 1083,  193,  193,  193,  193,  193,  193,  193,  193,
     1067, 1068,  193, 1066,  193,  193,  193, 1069, 1070,  193,
      193,  193,  193,  193,  193,  193,  193, 1071, 1083,  193,
      193,  193,  193,  193,  193,  193,  193, 1067, 1068,  193,
      193,  193,  193,  193, 1069, 1070, 1151,  193,  193, 1084,

      193,  193,  193,  193, 1071,  193,  193, 1073,  193,  193,
     1085, 1086,  193,  193, 1087, 1072,  193,  193,  193, 1088,
      193, 1089,  193, 1074,  193,  193, 1084,  193,  193,  193,
     1151, 1151,  193,  193, 1073, 1091,  193, 1085, 1086,  193,
      193, 1087, 1072,  193,  193,  193, 1088,  193, 1089,  193,
     1074,  193,  193,  193,  193,  193, 1092, 1093,  193,  193,
      193,  193, 1091,  193, 1151,  193,  193,  193, 1151, 1094,
     1151,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193, 1092, 1093,  193,  193,  193,  193,  193,
     1095,  193,  193,  193,  193,  193, 1094,  193, 1151,  193,

      193,  193,  193,  193,  193,  193,  193, 1096,  193,  193,
      193,  193, 1098,  193,  193,  193,  193, 1095,  193, 1151,
      193,  193,  193, 1097,  193,  193,  193, 1106,  193,  193,
      193,  193,  193,  193, 1096,  193,  193,  193,  193, 1098,
      193,  193,  193,  193, 1107,  193, 1099, 1100,  193, 1104,
     1097,  193,  193, 1151, 1106, 1108,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1107,  193, 1099, 1100, 1102, 1104, 1101,  193,  193,
     1103,  193, 1108, 1109,  193,  193,  193,  193,  193, 1110,
      193,  193,  193,  193,  193, 1111,  193, 1112, 1151,  193,

      193,  193, 1102, 1151, 1101,  193,  193, 1103,  193,  193,
     1109,  193,  193,  193,  193,  193, 1110,  193, 1114,  193,
      193,  193, 1111,  193, 1112,  193,  193,  193,  193,  193,
     1115, 1151,  193,  193, 1116,  193,  193,  193,  193,  193,
     1151,  193,  193,  193,  193, 1114,  193,  193,  193,  193,
      193, 1117,  193,  193, 1122,  193,  193, 1115,  193, 1120,
      193, 1116,  193,  193,  193,  193,  193,  193,  193, 1118,
      193, 1123, 1124,  193, 1119,  193,  193, 1126, 1117, 1130,
      193, 1122,  193,  193, 1151,  193, 1120,  193,  193,  193,
      193,  193,  193,  193,  193, 1151, 1118,  193, 1123, 1124,

      193, 1119,  193, 1127, 1126,  193, 1130,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193, 1128,  193,  193,
      193,  193,  193, 1151,  193,  193, 1151,  193, 1151, 1151,
     1127, 1132,  193,  193,  193,  193,  193, 1151,  193,  193,
      193,  193,  193, 1151, 1128, 1151, 1151, 1151,  193,  193,
     1151, 1151,  193, 1151,  193, 1151, 1151, 1151, 1132, 1151,
      193, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  193,  193,
       46,   46,   46,   46,   46,   88, 1151, 1151,   88,   88,
      178,  178,  178, 1151,  178,  180, 1151,  180,  180,  180,
      183, 1151,  183,  183,  183,  193, 1151,  193,  193,  193,

        7, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

static const flex_int16_t yy_chk[4678] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1154,   23,   30,   24,   21,
     1148,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1147,   25, 1146,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1145,   32,   27, 1144,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1143,   26, 1142,   29,   26, 1141,   27,   26,
       28, 1140,   26,   32,   27,   26, 1139,   32,   28,   29,
       42, 1138,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34, 1137,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1136,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1135,   35,   33,   41,
       34,   41,   36,  100,   41,   35,   34,   34,   36,   35,
       38,   39,   35,   39,   38,  103,   39,   71,   55,  104,
       38,   58,   58,   39,   39, 1134,   41, 1133,   41,   55,
      100,   41,   86,   86,   67,   70,  108,   71,   39, 1131,
       39,   67,  103,   39,   71,   70,  104,   67,  111,  101,
       39,   39,   40,  111,   67,   70,   40,  101,  107,   40,
       40,   67,   70,  108,   71,  107,   40,  114,   67,   40,
      181,  181,   70, 1129,   67,  111,  101, 1125, 1121,   40,

      111,   67,   70,   40,  101,  107,   40,   40, 1113, 1105,
     1090, 1075,  107,   40,  114, 1041,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
     1007,   61,   61,   61,   61,   61,   61,   77,   68,   84,
      947,  887,   68,  804,  721,  115,   68,   61,   61,   61,
       72,  116,   68,   61,   72,   61,  117,   77,  118,   84,
       72,   61,   68,   61,   77,   68,   84,   61,   61,   68,
       72,   83,  115,   68,   83,   83,  611,   72,  116,   68,
       61,   72,   61,  117,   77,  118,   84,   72,   61,   68,

       61,   83,  120,  501,   61,   61,  388,   72,   83,  274,
      185,   83,   83,   61,   62,   62,  183,   62,   62,   62,
       62,   62,   62,   90,   88,   85,   73,   76,   83,  120,
       73,   76,   60,   62,   62,   62,   73,  110,   76,   78,
       62,   81,  102,   78,   76,  102,   73,  110,  121,   78,
       81,   76,   81,   73,   76,   81,  122,   73,   76,   78,
       62,   81,   59,   73,  110,   76,   78,   62,   81,  102,
       78,   76,  102,   73,  110,  121,   78,   81,   76,   81,
       52,  123,   81,  122,  105,  105,   78,   62,   81,   62,
       63,  124,   82,  125,   63,  126,   82,   63,  105,  127,

       82,  109,  109,  109,   63,  109,   51,   63,  123,  113,
      113,  105,  105,  129,   63,   47,   82,   63,  124,   82,
      125,   63,  126,   82,   63,  105,  127,   82,  109,  109,
      109,   63,  109,  112,   63,  112,  113,  113,  112,   45,
      129,   63,   64,   82,  112,   20,   64,  130,  132,  128,
       64,  112,  128,  133,  135,  119,   64,  119,  136,   64,
      112,  119,  112,   19,  137,  112,   64,   11,  119,   64,
      138,  112,  119,   64,  130,  132,  128,   64,  112,  128,
      133,  135,  119,   64,  119,  136,   64,    7,  119,  141,
      134,  137,  142,   64,   65,  119,  139,  138,  139,  119,

      134,   65,  143,   65,  144,  134,  134,  140,   65,  140,
      145,  146,  147,   65,   65,    4,  141,  134,  148,  142,
      140,   65,  150,  139,  151,  139,    3,  134,   65,  143,
       65,  144,  134,  134,  140,   65,  140,  145,  146,  147,
       65,   65,   66,  152,  153,  148,   66,  140,  154,  150,
       66,  151,  154,   66,  156,  157,   66,  158,    0,   66,
      160,    0,   66,    0,  161,  162,   66,    0,    0,   66,
      152,  153,  155,   66,    0,  154,    0,   66,    0,  154,
       66,  156,  157,   66,  158,  155,   66,  160,  159,   66,
      155,  161,  162,   66,   69,   69,  163,  159,  164,  155,

      165,   69,   69,   69,  166,  159,  167,  169,   69,  164,
      169,    0,  155,  170,   69,  159,  171,  155,  168,    0,
      172,   69,   69,  163,  159,  164,  172,  165,   69,   69,
       69,  166,  159,  167,  169,   69,  164,  169,  168,    0,
      170,   69,   74,  171,  173,  168,   74,  172,  174,  175,
      176,  277,  193,  172,    0,    0,   74,  173,    0,  279,
      194,  194,   74,   74,  280,  168,   74,    0,    0,   74,
        0,  173,  193,   74,  282,  174,  175,  176,  277,  193,
        0,  194,  195,   74,  173,  196,  279,  194,  194,   74,
       74,  280,  196,   74,   75,   75,  199,  195,  199,  193,

      196,  282,  195,   75,    0,  196,    0,   75,  194,  195,
       75,    0,  196,  198,   75,    0,  284,    0,  199,  196,
        0,   75,   75,  199,  195,  199,  198,  196,    0,  195,
       75,  201,  196,  198,   75,  197,    0,   75,  197,  197,
      198,   75,   79,  284,   79,  199,  285,   79,  200,  200,
      200,  201,  286,  198,   79,   79,    0,    0,  201,  197,
      198,    0,  197,  200,   79,  197,  197,    0,  200,   79,
      287,   79,    0,  285,   79,  200,  200,  200,  201,  286,
        0,   79,   79,  205,  203,  218,  197,  202,  203,    0,
      200,   79,   80,  205,  202,  200,   80,  287,  218,   80,

       80,  202,  289,  205,  290,  218,   80,  202,  203,   80,
      205,  203,  218,  291,  202,  203,   80,    0,    0,   80,
      205,  202,    0,   80,    0,  218,   80,   80,  202,  289,
      205,  290,  218,   80,  202,  203,   80,    0,    0,    0,
      291,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  204,  206,  292,  210,
        0,  208,  293,  204,  204,  204,    0,  204,    0,  210,
        0,    0,  206,  211,  208,  208,  204,  206,    0,  210,
        0,  208,    0,  204,  206,  292,  210,  211,  208,  293,
      204,  204,  204,  211,  204,  209,  210,  212,  212,  206,
      211,  208,  208,  204,  206,  207,  210,  207,  208,  207,
      207,  209,    0,  226,  211,  209,  207,  213,  212,  213,
      211,  215,  209,  207,  212,  212,  294,    0,  215,  207,
      295,    0,  207,  226,  207,  296,  207,  207,  209,  213,
      226,  215,  209,  207,  213,  212,  213,    0,  215,  298,

      207,  216,    0,  294,  217,  215,  207,  295,  216,  225,
      226,  299,  296,  220,  217,    0,  213,  214,  215,  214,
      220,  216,  219,  214,  217,  225,  298,    0,  216,  225,
      214,  217,  219,  220,  214,  216,  225,    0,  299,  214,
      220,  217,  219,  221,  214,  222,  214,  220,  216,  219,
      214,  217,  225,  221,  223,  222,  225,  214,  224,  219,
      220,  214,  300,  221,  228,  222,  214,  224,  223,  219,
      221,  223,  222,  227,  223,  228,    0,  227,  224,  230,
      221,  223,  222,  231,  228,  224,  302,  231,  230,  300,
      221,  228,  222,  227,  224,  223,  232,    0,  223,  230,

      227,  223,  228,  231,  227,  224,  230,  233,  233,    0,
      231,  228,  303,  302,  231,  230,  232,    0,  304,  305,
      227,  229,  229,  232,  237,    0,  230,  233,    0,    0,
      231,  229,  234,  237,  233,  233,  229,  229,  234,  303,
      234,  301,  229,  232,  237,  304,  305,    0,  229,  229,
        0,  237,  234,  235,  233,  235,  301,  235,  229,  234,
      237,  236,  306,  229,  229,  234,  235,  234,  301,  229,
      307,  237,  239,    0,  236,  240,  238,  235,    0,  234,
      235,  236,  235,  301,  235,  238,  309,  239,  236,  306,
      240,  241,  239,  235,  310,  240,  238,  307,  241,  239,

      244,  236,  240,  238,  235,  242,  243,  243,  236,  242,
        0,  241,  238,  309,  239,  260,    0,  240,  241,  239,
      244,  310,  240,  238,    0,  241,  243,  244,  246,  242,
      245,  245,  242,  243,  243,  260,  242,  248,  241,  247,
      249,  248,  260,  246,  249,    0,  311,  244,  246,    0,
      312,  245,  247,  243,    0,  246,  242,  245,  245,  247,
      249,  248,  260,    0,  248,  313,  247,  249,  248,    0,
      246,  249,  250,  311,  252,  246,  250,  312,  245,  247,
      251,  252,  251,  314,    0,  250,  247,  249,  248,    0,
      250,  315,  313,  269,  252,  253,  250,    0,  253,  250,

      251,  252,  254,  250,  254,  316,  255,  251,  252,  251,
      314,  254,  250,  269,    0,  253,  255,  250,  315,  254,
      269,  252,  253,  250,  254,  253,  255,  251,  256,  254,
      257,  254,  316,  255,  257,  317,  258,    0,  254,  258,
      269,  256,  253,  255,  261,  262,  254,    0,  256,  318,
      259,  254,  261,  255,  257,  256,  262,  257,  259,  258,
        0,  257,  317,  258,  261,  262,  258,    0,  256,  259,
      259,  261,  262,    0,  263,  256,  318,  259,  263,  261,
      264,  257,    0,  262,  264,  259,  258,  264,  265,  265,
        0,  261,  262,  268,  263,    0,  259,  259,  263,  266,

      264,  263,    0,  266,  319,  263,  268,  264,    0,  265,
        0,  264,  320,  268,  264,  265,  265,  270,    0,  266,
      268,  263,  267,  321,  271,  263,  266,  264,  271,  267,
      266,  319,  270,  268,  322,  267,  265,  270,  323,  320,
      268,  324,  267,  288,  270,  288,  266,  325,  271,  267,
      321,  271,    0,    0,    0,  271,  267,    0,    0,  270,
      288,  322,  267,  326,  270,  323,  327,  328,  324,  267,
      288,  329,  288,  330,  325,  271,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  331,  288,  333,  332,
      326,  334,  336,  327,  328,  337,  338,  339,  329,  332,

      330,  340,  341,  342,  343,  344,  345,  347,  348,  349,
      350,  351,  352,  331,  353,  333,  332,  354,  334,  336,
      355,  356,  337,  338,  339,  357,  332,  358,  340,  341,
      342,  343,  344,  345,  347,  348,  349,  350,  351,  352,
      359,  353,  360,  361,  354,  362,  363,  355,  356,  365,
      366,  367,  357,  368,  358,  369,  370,  371,  372,  374,
      377,  376,  375,  376,  378,  379,  380,  359,  382,  360,
      361,  375,  362,  363,  381,  383,  365,  366,  367,  385,
      368,  386,  369,  370,  371,  372,  374,  377,  376,  375,
      376,  378,  379,  380,    0,  382,  381,    0,  375,  384,

      390,  381,  383,  384,  391,  392,  385,    0,  386,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  393,
      390,  394,  395,  381,  391,  392,  384,  390,  394,  396,
      384,  391,  392,  396,  397,    0,    0,  502,    0,  393,
        0,  394,  395,  503,    0,  400,  393,  390,  394,  395,
        0,  391,  392,  396,  397,  394,  396,  398,  399,  504,
      396,  397,  399,  400,  502,  400,  393,  398,  394,  395,
      503,  402,  400,  402,    0,  401,    0,  398,  399,  405,
      396,  397,  401,  403,  398,  399,  504,  405,  402,  399,
      400,  404,  400,  402,  398,  401,  403,  406,  402,  405,

      402,  407,  401,  403,  398,  399,  405,  404,    0,  401,
      403,  404,  406,  409,  405,  402,  410,  406,  404,    0,
      402,  407,  401,  403,  406,  408,  405,  409,  407,  408,
      403,  411,    0,  409,  404,  412,  410,  413,  404,  406,
      409,  413,  412,  410,  406,  505,  414,    0,  407,  408,
      414,  411,  408,    0,  409,  412,  408,  413,  411,  415,
      409,  417,  412,  410,  413,  416,    0,  416,  413,  412,
      414,  421,  505,  414,  415,  418,  408,  414,  411,  415,
      419,  417,  412,  419,  413,  420,  415,  416,  417,  422,
      418,  421,  416,  424,  416,  418,  420,  414,  421,  506,

      423,  415,  418,  419,  423,  420,  415,  419,  417,  422,
      419,    0,  420,  424,  416,  426,  422,  418,  421,  425,
      424,  425,  418,  420,  423,  428,  506,  423,  507,  426,
      419,  423,  420,  429,  430,  426,  422,  427,  428,  431,
      424,  425,  426,  431,  427,  428,  425,  429,  425,  508,
        0,  423,  428,  429,  430,  507,  426,  427,    0,  432,
      429,  430,  426,  431,  427,  428,  431,  432,  425,  433,
      431,  427,  428,    0,  429,  434,  508,  433,  439,  432,
      429,  430,  434,  436,  427,  435,  432,  438,  435,  433,
      431,  438,    0,  439,  432,  434,  433,  437,  439,  436,

      437,  442,  434,  436,  433,  439,  432,  438,  435,  434,
      436,  442,  435,  443,  438,  435,  433,  437,  438,  440,
      439,  442,  434,  441,  437,  439,  436,  437,  442,  441,
      436,  444,  440,  443,  438,  435,    0,  445,  442,  440,
      443,  510,  446,  441,  437,  447,  440,    0,  442,    0,
      441,  444,  446,  449,  448,    0,  441,  445,  444,  440,
      443,  447,  446,  448,  445,  447,  440,  450,  510,  446,
      441,  451,  447,  449,  448,  453,  453,  513,  444,  446,
      449,  448,  450,    0,  445,  514,    0,  450,  447,  446,
      448,  451,  447,  452,  450,  454,  453,  452,  451,  454,

      449,  448,  453,  453,  513,  455,  515,  455,  456,  450,
      456,  457,  514,  452,  450,    0,  516,    0,  451,  454,
      452,  458,  454,  453,  452,  455,  454,  457,  456,  459,
      460,  457,  455,  515,  455,  456,  458,  456,  457,  463,
      452,  458,  464,  516,  461,  459,  454,  462,  458,  459,
      460,  461,  455,  463,  457,  456,  459,  460,  457,  463,
      462,  465,  464,  458,  461,    0,  463,  462,  458,  464,
        0,  461,  459,  467,  462,  466,  459,  460,  461,  466,
      463,  465,  467,    0,  468,  470,  463,  462,  465,  464,
      469,  461,  470,  467,  462,  468,    0,  471,  469,  466,

      467,  471,  466,  472,  468,  470,  466,  474,  465,  467,
      469,  468,  470,  473,  474,  475,  473,  469,  472,  470,
      467,  471,  468,  472,  471,  469,  466,  474,  471,  476,
      472,  468,  470,  473,  474,  475,    0,  469,  477,  476,
      473,  474,  475,  473,  478,  472,    0,    0,  471,  476,
      472,    0,  479,  480,  474,    0,  476,    0,  477,    0,
      473,  486,  475,  481,  478,  477,  476,  482,  480,  484,
      479,  478,  479,  480,  482,    0,  476,  518,  481,  479,
      480,  486,  483,  481,  484,  477,  487,  482,  486,  484,
      481,  478,  519,  483,  482,  480,  484,  479,  485,  479,

      480,  482,  483,  488,  518,  481,  487,  485,  486,  483,
      481,  484,  488,  487,  482,  489,  484,  491,  485,  519,
      483,  520,    0,  488,  489,  485,  490,  491,  492,  483,
      488,    0,  492,  487,  485,  489,  490,  491,  490,  488,
      493,  494,  489,  521,  491,  485,  490,    0,  520,  493,
      488,  489,  492,  490,  491,  492,  495,  494,  495,  492,
      493,  494,  489,  490,  491,  490,  497,  493,  494,  522,
      521,  496,    0,  490,  499,    0,  493,  499,  495,  492,
      523,  497,  500,  495,  494,  495,  497,  493,  494,  496,
      498,  496,  524,  497,  499,  500,  522,  525,  496,  498,

      526,  499,  500,  498,  499,  495,  527,  523,  497,  500,
      498,  528,  529,  497,  532,  533,  496,  498,  496,  524,
      534,  499,  500,  535,  525,  536,  498,  526,  537,  500,
      498,  538,  540,  527,  541,  544,  545,  498,  528,  529,
      547,  532,  533,  550,  551,  552,  553,  534,  554,  555,
      535,  557,  536,  561,  563,  537,  565,  567,  538,  540,
      555,  541,  544,  545,  566,  566,  568,  547,  570,  571,
      550,  551,  552,  553,  572,  554,  555,  573,  557,  574,
      561,  563,  576,  565,  567,  577,  579,  555,  580,  581,
      582,  566,  566,  568,  583,  570,  571,  584,  585,  587,

      588,  572,  589,  590,  573,  593,  574,  594,  596,  576,
      597,  598,  577,  579,  599,  580,  581,  582,  600,  601,
      602,  583,  603,  604,  584,  585,  587,  588,  606,  589,
      590,  608,  593,    0,  594,  596,  614,  597,  598,  612,
      613,  599,  615,    0,  616,  600,  601,  602,  618,  603,
      604,    0,  612,  613,    0,  606,  614,  616,  608,  612,
      613,  617,  615,  614,  616,  619,  612,  613,  618,  615,
      617,  616,  620,  621,  622,  618,  620,    0,  623,  612,
      613,  617,  623,  614,  616,  619,  612,  613,  617,  615,
      624,  616,  619,  621,  622,  618,  620,  617,  624,  620,

      621,  622,  623,  620,  627,  623,  626,  625,  617,  623,
      624,  625,  619,  724,    0,  628,    0,  624,  726,  626,
      621,  622,    0,  620,  627,  624,  626,  625,  630,  623,
      628,  627,  631,  626,  625,  628,  629,  624,  625,  631,
      724,  632,  628,  630,  633,  726,  626,  728,  630,  632,
      629,  627,  631,  626,  625,  630,  629,  628,  634,  631,
      633,  632,  628,  629,  633,  635,  631,    0,  632,  635,
      630,  633,    0,  634,  728,  630,  632,  629,  634,  631,
      637,  636,  637,  629,  640,  634,  638,  633,  632,  635,
      638,  633,  635,    0,  636,  641,  635,    0,    0,  648,

      634,  636,  637,  639,  640,  634,  638,  637,  636,  637,
      639,  640,  645,  638,  642,  641,  635,  638,    0,  648,
      644,  636,  641,  639,  643,  642,  648,  645,  636,  637,
      639,  640,  645,  638,  642,  643,  644,  639,  649,  645,
      644,  642,  641,    0,  643,  646,  648,  644,    0,  646,
      639,  643,  642,  647,  645,  650,    0,  647,  649,  645,
        0,  642,  643,  644,  651,  649,  652,  644,  651,  646,
      650,  643,  646,    0,  653,  650,  646,  647,  655,  654,
      647,    0,  650,  654,  647,  649,  652,  656,  651,  655,
      729,  651,    0,  652,  653,  651,  646,  650,  655,  657,

      658,  653,  650,  654,  647,  655,  654,  656,  657,  659,
      654,  660,  730,  652,  656,  651,  655,  729,    0,  657,
      658,  653,  662,  666,  661,  655,  657,  658,    0,  659,
      654,  660,  663,    0,  656,  657,  659,  661,  660,  730,
      664,  662,  662,  666,  661,  663,  657,  658,    0,  662,
      666,  661,  663,  664,    0,  667,  659,  668,  660,  663,
      664,  665,  667,  665,  661,  669,  670,  664,  662,  662,
      666,  661,  663,    0,  665,  667,  671,  668,  672,  663,
      664,  665,  667,  731,  668,  669,  670,  664,  665,  667,
      665,  671,  669,  670,  674,  675,  671,  677,  672,  673,

      677,  665,  667,  671,  668,  672,  673,  732,  665,    0,
      731,  733,  669,  670,  674,  675,  676,  677,  671,  673,
      679,  674,  675,  671,  677,  672,  673,  677,  734,  681,
      676,  676,  678,  673,  732,    0,  676,    0,  733,    0,
      679,  674,  675,  676,  677,  678,  673,  679,  680,  681,
      680,  682,  678,  683,  684,  734,  681,  676,  676,  678,
        0,    0,  684,  676,  682,  685,  683,  679,  688,    0,
      680,  682,  678,  683,  684,  680,  681,  680,  682,  678,
      683,  684,  686,  687,  736,  685,  686,  687,  688,  684,
        0,  682,  685,  683,  737,  688,  689,  680,  682,  694,

      683,  684,  691,    0,  689,  690,  686,  687,  694,  686,
      687,  736,  685,  686,  687,  688,  689,  691,  690,  694,
        0,  737,  691,  689,  692,  690,  694,  692,  693,  691,
      696,  689,  690,  686,  687,  694,  693,  695,  697,  695,
      738,  699,  739,  689,  691,  690,  694,  692,  693,  691,
      696,  692,  690,  701,  692,  693,  698,  696,  697,  695,
      698,  699,  700,  693,  695,  697,  695,  738,  699,  739,
      702,    0,  700,  701,  692,  693,  698,  696,  703,    0,
      701,  704,  700,  698,  705,  697,  695,  698,  699,  700,
      702,  706,  703,  706,  708,  704,  740,  702,  703,  700,

      701,  704,    0,  698,  705,  703,  707,  712,  704,  700,
      708,  705,  709,  706,  708,  707,  709,  702,  706,  703,
      706,  708,  704,  740,    0,  703,  707,  712,  704,  710,
      711,  705,  711,  707,  712,  713,  709,  708,  713,  709,
      706,  708,  707,  709,  710,    0,  715,  714,  716,  710,
      711,  714,  717,  707,  712,  713,  710,  711,  742,  711,
      718,  719,  713,  709,  716,  713,  715,  714,  716,  720,
      743,  710,  717,  715,  714,  716,  710,  711,  714,  717,
      718,  719,  713,  744,  745,  742,  746,  718,  719,  720,
      747,  716,  748,  715,  714,  716,  720,  743,  749,  717,

      750,  751,  754,  755,  757,  759,  762,  718,  719,  763,
      744,  745,  764,  746,  765,  770,  720,  747,  772,  748,
      773,  774,  777,  778,  779,  749,  780,  750,  751,  754,
      755,  757,  759,  762,  781,  783,  763,  784,  785,  764,
      786,  765,  770,  787,  788,  772,  789,  773,  774,  777,
      778,  779,  790,  780,  791,  792,  793,  795,  796,  797,
      799,  781,  783,  800,  784,  785,  801,  786,  802,  805,
      787,  788,  806,  789,  808,    0,    0,  807,  888,  790,
      809,  791,  792,  793,  795,  796,  797,  799,  810,  805,
      800,  811,  806,  801,  808,  802,  805,  807,  807,  806,

      809,  808,  812,  812,  807,  888,    0,  809,  810,  890,
      813,  811,  813,  814,    0,  810,  805,    0,  811,  806,
        0,  808,  814,  812,  807,  807,  815,  809,  817,  812,
      812,  818,  813,  814,  816,  810,  890,  813,  811,  813,
      814,  815,  820,  819,  816,    0,  815,  819,  817,  814,
      812,  818,  820,  815,  816,  817,  891,  822,  818,  813,
      814,  816,  820,  819,  822,  823,  824,    0,  815,  820,
      819,  816,  821,  815,  819,  817,  821,  822,  818,  820,
      826,  816,  828,  891,  822,  823,  824,    0,  827,  820,
      819,  822,  823,  824,  825,  826,  821,  827,  825,  821,

      826,    0,  828,  821,  822,    0,  829,  826,  827,  828,
        0,    0,  823,  824,  825,  827,  830,  831,  835,    0,
      832,  825,  826,  821,  827,  825,  829,  826,  834,  828,
      834,  830,  831,  829,  832,  827,  830,  831,  835,    0,
      832,  825,  833,  830,  831,  835,  833,  832,  836,    0,
      834,  837,    0,  829,  839,  834,  841,  834,  830,  831,
      892,  832,  833,  830,  831,  835,  837,  832,  836,  833,
      842,  837,  838,  833,  839,  836,  841,  834,  837,  838,
      840,  839,  840,  841,  843,  842,    0,  892,  844,  833,
      842,    0,  838,  837,  846,  836,  847,  842,  837,  838,

      840,  839,    0,  841,  843,  845,  838,  840,  844,  840,
      847,  843,  842,  849,  846,  844,  847,  842,  850,  838,
      845,  846,  848,  847,  851,  845,  852,  840,  853,  848,
      854,  843,  845,  849,  893,  844,    0,  847,  850,  895,
      849,  846,  848,  847,  851,  850,  852,  845,  853,  848,
      854,  851,  845,  852,  855,  853,  848,  854,  855,  856,
      849,  893,  856,  858,  859,  850,  895,  857,  860,  848,
        0,  851,    0,  852,    0,  853,  863,  854,  855,  856,
      861,  855,  857,  858,  859,  855,  856,  857,  860,  856,
      858,  859,    0,  861,  857,  860,  863,  864,  865,  862,

      861,  864,    0,  863,    0,  855,  856,  861,  897,  857,
      858,  859,  862,  898,  857,  860,  869,  864,  865,  862,
      861,  868,  868,  863,  864,  865,  862,  861,  864,  866,
      867,  869,    0,  866,  867,  897,  869,    0,  899,  862,
      898,    0,  868,  869,  864,  865,  862,  874,  868,  868,
      870,  870,    0,  866,  867,  871,  866,  867,  869,  871,
      866,  867,  874,  869,  875,  899,    0,  874,  875,  868,
      872,  870,  873,  877,  874,    0,  878,  870,  870,  871,
      866,  867,  871,  876,  872,  873,  871,  876,  875,  874,
      872,  875,  873,  877,  874,  875,  878,  872,  870,  873,

      877,  879,  879,  878,  880,  881,  871,  876,    0,    0,
      876,  872,  873,  882,  876,  875,  886,  872,  900,  873,
      877,  902,  879,  878,  880,  881,  883,  882,  879,  879,
      883,  880,  881,  882,  876,  884,  886,  885,  904,  908,
      882,  885,  910,  886,  884,  900,  911,  917,  902,  879,
      883,  880,  881,  883,  882,  884,  918,  883,  921,  922,
      882,  885,  884,  886,  885,  904,  908,  924,  885,  910,
      925,  884,  926,  911,  917,  928,  929,  883,  930,  934,
      936,  937,  884,  918,  938,  921,  922,  939,  885,  944,
      945,  946,  948,  949,  924,  950,    0,  925,    0,  926,

        0,  951,  928,  929,  950,  930,  934,  936,  937,  952,
        0,  938,  948,  949,  939,  950,  944,  945,  946,  948,
      949,  951,  950,  953,  952,  954,  955,  956,  951,  952,
        0,  950, 1011,  955,    0, 1014,  952,  953,    0,  948,
      949,  957,  950,  953, 1015,  954,  955,  956,  951,  957,
      953,  952,  954,  955,  956,  958,  952,  958,  959, 1011,
      955,  957, 1014,  961,  953,  959,  960,    0,  957,  963,
      953, 1015,  954,  955,  956, 1018,  957,  958,  959,  965,
      966,  960,  958,  961,  958,  959,  960,    0,  957,  963,
      961,  962,  959,  960,  962,  964,  963,  964,    0,  965,

      966,    0, 1018,  967,  958,  959,  965,  966,  960,  968,
      961,  969,    0,  960,  962, 1019,  963,  964,  962,  970,
      971,  962,  964,  967,  964,  972,  965,  966,  970,  968,
      967,  969,    0,  973,  974,  971,  968,  975,  969,  970,
      971,  962, 1019,  976,  964,  972,  970,  971,  978,  979,
      967,    0,  972,  973,  974,  970,  968,  975,  969,  980,
      973,  974,  971,  976,  975,  977,  970,  971,  978,  979,
      976,  983,  972,  982,  985,  978,  979,  982,  977,  980,
      973,  974,  981, 1024,  975,  977,  980,  986,  984,  981,
      976,  983,  977,  987,  985,  978,  979,  982,  983, 1026,

      982,  985,  981,  984,  982,  977,  980,  986,  984,  981,
     1024,  991,  977,  987,  986,  984,  981,  988,  983,  988,
      987,  985,  990,  989,  982,  989, 1026,  992,  993,  981,
      984,  991,    0,    0,  986,  984,  990,  995,  991,  988,
      987,    0,  990,    0,  988,  989,  988,  992,  993,  990,
      989, 1027,  989,  994,  992,  993, 1000,  995,  991, 1001,
      994,  996,  999,  990,  995,  996,  988,  997,  998,  990,
      998,  997,  989,  994,  992,  993, 1000,  999, 1027, 1001,
      994, 1002,  999, 1000,  995,  996, 1001,  994,  996,  999,
      998,  997,  996, 1003,  997,  998,    0,  998,  997, 1030,

      994, 1002, 1004, 1000,  999, 1005, 1001, 1005, 1002,  999,
     1031, 1034,  996, 1003, 1035, 1004, 1006,  998,  997, 1036,
     1003, 1037, 1004, 1006, 1042, 1005, 1030, 1043, 1002, 1004,
        0,    0, 1005, 1044, 1005, 1045, 1006, 1031, 1034, 1046,
     1003, 1035, 1004, 1006, 1042, 1047, 1036, 1043, 1037, 1004,
     1006, 1042, 1005, 1044, 1043, 1045, 1048, 1049, 1050, 1046,
     1044, 1049, 1045, 1006,    0, 1047, 1046, 1051,    0, 1052,
        0, 1042, 1047, 1054, 1043, 1053, 1048, 1055, 1050, 1056,
     1044, 1049, 1045, 1048, 1049, 1050, 1046, 1051, 1049, 1052,
     1053, 1057, 1047, 1054, 1051, 1053, 1052, 1055,    0, 1056,

     1054, 1059, 1053, 1048, 1055, 1050, 1056, 1058, 1049, 1058,
     1060, 1057, 1061, 1062, 1051, 1063, 1052, 1053, 1057,    0,
     1054, 1059, 1053, 1060, 1055, 1066, 1056, 1076, 1059, 1058,
     1060, 1064, 1061, 1062, 1058, 1063, 1058, 1060, 1057, 1061,
     1062, 1065, 1063, 1067, 1078, 1066, 1064, 1065, 1059, 1071,
     1060, 1064, 1066,    0, 1076, 1081, 1058, 1060, 1064, 1061,
     1062, 1065, 1063, 1067, 1068, 1070, 1072, 1069, 1065, 1071,
     1067, 1078, 1066, 1064, 1065, 1069, 1071, 1068, 1064, 1073,
     1070, 1074, 1081, 1083, 1068, 1070, 1072, 1069, 1065, 1086,
     1067, 1068, 1070, 1072, 1069, 1087, 1071, 1088,    0, 1073,

     1092, 1074, 1069,    0, 1068, 1091, 1073, 1070, 1074, 1094,
     1083, 1068, 1070, 1072, 1069, 1093, 1086, 1095, 1091, 1096,
     1092, 1097, 1087, 1099, 1088, 1091, 1073, 1092, 1074, 1094,
     1093,    0, 1091, 1100, 1096, 1093, 1094, 1095, 1098, 1096,
        0, 1097, 1093, 1099, 1095, 1091, 1096, 1092, 1097, 1101,
     1099, 1098, 1091, 1100, 1107, 1103, 1094, 1093, 1098, 1103,
     1100, 1096, 1093, 1102, 1095, 1098, 1096, 1104, 1097, 1101,
     1099, 1109, 1112, 1114, 1102, 1103, 1101, 1115, 1098, 1124,
     1100, 1107, 1103, 1102,    0, 1098, 1103, 1104, 1116, 1117,
     1102, 1118, 1119, 1114, 1104,    0, 1101, 1115, 1109, 1112,

     1114, 1102, 1103, 1117, 1115, 1126, 1124, 1120, 1116, 1117,
     1102, 1118, 1119, 1127, 1104, 1116, 1117, 1120, 1118, 1119,
     1114, 1132, 1128,    0, 1115, 1126,    0, 1120,    0,    0,
     1117, 1128, 1126, 1127, 1120, 1116, 1117,    0, 1118, 1119,
     1127, 1132, 1128,    0, 1120,    0,    0,    0, 1132, 1128,
        0,    0, 1126,    0, 1120,    0,    0,    0, 1128,    0,
     1127,    0,    0,    0,    0,    0,    0,    0, 1132, 1128,
     1152, 1152, 1152, 1152, 1152, 1153,    0,    0, 1153, 1153,
     1155, 1155, 1155,    0, 1155, 1156,    0, 1156, 1156, 1156,
     1157,    0, 1157, 1157, 1157, 1158,    0, 1158, 1158, 1158,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2086 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2100 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2387 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1152 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1151 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CHARACTER)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VARYING)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 146:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 153:
#line 218 "flex_lexer.l"
case 154:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
/* 
	 * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no 
	 * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
	 *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
	 */
case 155:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{
	yylval->ival = LLONG_MIN;
	return SQL_INTVAL;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{
	errno = 0;
	yylval->ival = strtoll(yytext, nullptr, 0);
	if (errno) {
		return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
		return 0;
	}
	return SQL_INTVAL;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 254 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 258 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 260 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3291 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1152 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1152 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1151);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 263 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

