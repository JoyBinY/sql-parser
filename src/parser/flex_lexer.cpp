#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1220] =
    {   0,
        0,    0,  180,  180,    2,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,  182,
        4,    4,  182,  182,  169,  178,  163,  164,  161,  169,
      169,  173,  162,  169,  169,  169,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      169,  180,  181,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,  167,  175,  175,  168,  175,  165,  166,
      175,  183,  183,  177,    4,  156,    0,    1,    0,  171,
      170,  173,  158,  157,  155,  159,  175,  175,  175,  175,
      175,  175,  175,  175,  128,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  129,
      175,  175,  130,  131,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  132,  133,  134,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  135,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  160,  180,  179,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,  126,  175,  175,  127,    0,  177,  174,
        0,  170,  114,  175,  115,  175,  175,  116,  175,  117,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  139,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  118,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  119,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  120,  175,
      175,  121,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  122,  175,  175,  123,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      124,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      125,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  175,  176,
        0,  175,  175,  175,  175,  175,  175,  175,   85,  175,
       86,   47,   87,  175,  175,  175,   88,  175,  175,   89,
      145,  175,  175,  175,  175,  175,   91,  175,  175,  175,
       92,   93,  175,  175,  175,  175,  175,  175,  175,   94,
      175,  175,   95,   96,  175,  175,   97,  175,   98,  138,
      175,  175,  175,  175,  175,  175,   99,  175,  100,  101,

      102,  175,  104,  175,  105,  175,  175,  175,  175,  106,
      175,  175,  175,  175,  175,  107,  175,  175,   34,  175,
      175,  175,  175,  175,  175,  175,  108,  175,  175,  175,
      175,  175,  109,  110,   32,  175,  148,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  111,  175,  112,  175,
      113,  141,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,  175,    0,   65,   66,  175,   67,  175,
      151,  175,  175,  175,  175,  175,  175,  175,   68,  175,
      175,  175,  175,  175,   69,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  149,   70,  175,  175,   71,

      175,  144,  103,  175,   72,   73,  175,  175,  175,  175,
       74,   75,   76,   77,  175,  140,  175,  175,  175,   78,
       79,  175,  175,  175,  175,  175,   80,  175,  175,  175,
      175,  175,  175,  175,   81,  175,  175,  175,  175,   82,
      175,  175,  175,   83,  175,  175,  175,  175,   84,  147,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,  175,    0,  175,   37,  175,
      175,  175,   38,  153,  175,   39,  175,  175,  175,  175,
       40,  175,   41,  175,   42,   43,   44,  175,   45,  175,
      175,   48,   49,   50,   51,   52,  175,  175,  175,   53,
      137,  146,  175,  175,   54,  175,  175,  175,   55,  175,
      175,   56,  136,   57,  175,   59,  175,   60,  175,  175,
      175,  175,   61,   62,   63,   64,  175,  175,  175,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   58,    0,   15,   16,   17,  175,   18,   19,  175,
      175,   33,   20,  175,  175,   21,   22,   46,   23,  175,
      175,  143,   24,  175,  175,   25,   26,  175,  175,   27,
      142,  175,   28,  175,  175,  175,  175,   31,   30,   36,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  175,
       90,  175,   10,   11,  175,  154,   12,  175,   13,  152,
       35,  175,  175,  175,   14,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   29,  175,    7,  175,    8,    9,  175,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    5,
        6,  175,    2,    2,    2,    2,    0,  150,    2,    2,

        0,    2,    0,    2,    0,    2,    0,    2,    0,    2,
        0,    2,    0,    2,    0,    2,  172,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
        9,    6,    6,   10,   11,   12,    6,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,    6,   23,   24,
       25,   26,    6,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
        6,    1,    6,    6,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,    6,   80,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1230] =
    {   0,
        0,    0,  830,  829,   80,    0,  153,  155,  157,  159,
      161,  163,  165,  167,  169,  176,  248,  328,  834, 4902,
      184,  189,  807,    0, 4902, 4902, 4902, 4902, 4902,  172,
      262,  273, 4902,  193,  793,  763,  325,  162,  332,  333,
      367,  375,  151,  170,  386,  158,  170,  380,  392,  414,
      425,  429,    0,  435,  473,  482,  316,  344,  262,  267,
      680,    0,  747,    0,  240,  242,  715,  731,    0,    0,
        0,  225,  289,  300,    0,  274,  707,  682,  553,  633,
      619,  634,  544,  687,  467,  688,  736,  549,  428,  631,
      675,  732,  738,  784,  450,  782,  834,  886,  838,  794,

      796,  541,  624, 4902,  894,  894, 4902,  938, 4902, 4902,
      938, 4902,    0,    0,  324, 4902,  696, 4902,  671,  971,
      998, 1009, 4902, 4902, 4902, 4902,    0,  332,  321,  550,
      492,  328,  380,  635,    0,  536,  393,  994,  479,  601,
      832,  419,  474,  483,  541,  557,  574, 1006,  566,  567,
      587,  605,  630,  662,  662,  676,  676,  680,  688,    0,
      722,  722, 1009,  731,  737,  726,  760,  787, 1011,  749,
      799,  827,  825,  833,  843,  855,  852,    0,  857,  869,
      874,  892,  940, 1029,  889,  891,  897, 1042,  932,  947,
      937, 1016, 1017, 1007, 1019, 1019, 1044, 1062, 1052, 1061,

     1057, 1055, 1064, 1063, 1051, 1073, 4902,    0, 4902,    0,
      472,    0,  678,    0,  639, 1124, 1134, 1145,    0,    0,
        0,    0, 1137, 1139, 1140, 1141, 1150, 1158, 1154, 1189,
     1172, 1193, 1206, 1203, 1215, 1228, 1280, 1244, 1245, 1246,
     1282, 1290, 1279, 1320, 1312, 1334, 1328, 1330, 1353, 1349,
     1364, 1372, 1388, 1386, 1387, 1295, 1416, 1417, 1439, 1431,
     1441, 1442, 1456, 1471, 1496, 1482, 1490, 1511, 1513, 1515,
     1507, 1548, 1545, 1536, 1550, 1559, 1567, 1582, 1584, 1603,
     1598, 1613, 1616, 1634, 1628, 1657, 1651, 1662, 1670, 1687,
     1652, 1666, 1692, 1700, 1711, 1726, 1724, 1741, 1736, 1737,

     1750, 1766,    0, 1073, 1780, 1566, 1074,  646,    0, 4902,
      633, 1841,    0, 1073,    0, 1074, 1068,    0, 1146,    0,
     1143, 1190, 1177, 1217, 1818, 1219, 1231, 1278, 1283, 1313,
     1348, 1338, 1366, 1371, 1387, 1393, 1402, 1470, 1425, 1446,
     1445, 1477, 1513, 1525,    0, 1543, 1569, 1612, 1627, 1635,
     1643, 1688, 1705, 1712, 1732, 1761, 1765, 1777, 1763, 1777,
     1778, 1770, 1777, 1788, 1798, 1810, 1811, 1815, 1834, 1803,
     1811,    0, 1821, 1839, 1836, 1842, 1852, 1847, 1848, 1835,
     1837, 1837,    0, 1847, 1842, 1842, 1857, 1858, 1863, 1853,
     1853, 1857, 1862, 1874, 1857, 1870, 1867, 1887, 1878, 1890,

        0, 1875, 1887, 1880, 1883, 1895, 1892, 1889, 1896, 1906,
        0, 1898, 1909, 1898, 1901, 1916, 1904, 1900, 1921, 1905,
     1909, 1935, 1923, 1914,    0,  621, 1973, 1947, 1949, 1952,
     1965, 1966, 1970, 1981, 1978, 2006, 1983, 1991, 1995, 2034,
     2024, 2019, 2040, 2050, 2052, 2073, 2068, 2058, 2084, 2083,
     2102, 2112, 2074, 2126, 2107, 2123, 2140, 2136, 2128, 2141,
     2162, 2152, 2171, 2166, 2177, 2181, 2192, 2190, 2220, 2195,
     2226, 2225, 2238, 2244, 2248, 2250, 2269, 2236, 2274, 2282,
     2266, 2279, 2288, 2290, 2298, 2303, 2304, 2328, 2320, 2332,
     2334, 2342, 2344, 2356, 2366, 2357, 2374, 2368, 2380, 2392,

     2396, 2398, 2402, 2424, 2426, 2430, 2428, 2452, 2438, 2454,
     2464, 2480, 2456, 2478, 2470, 2492, 2482, 2493, 2506, 2523,
     2531, 2532, 2536, 2534, 2544, 2546, 2567, 2565, 2580, 2588,
     2586, 2589, 2598, 2601, 2624, 2629, 2634, 2630, 1980, 4902,
      613, 2007, 2073, 2071, 2158, 2187, 2193, 2214,    0, 2326,
        0,    0, 2410, 2487, 2537, 2586,    0, 2605, 2617, 2625,
        0, 2634, 2644, 2637, 2640, 2663, 2647, 2664, 2659, 2665,
        0,    0, 2662, 2663, 2659, 2663, 2687, 2688, 2685,    0,
     2673, 2695,    0,    0, 2696, 2682,    0, 2685,    0, 2681,
     2696, 2684, 2679, 2690, 2691, 2704,    0, 2700,    0,    0,

        0, 2693,    0, 2702,    0, 2713, 2712, 2711, 2703,    0,
     2730, 2729, 2719, 2724, 2730,    0, 2743, 2746,    0, 2737,
     2733, 2732, 2751, 2741, 2741, 2753,    0, 2745, 2757, 2754,
     2760, 2751,    0,    0, 2748, 2749,    0, 2769, 2759, 2754,
     2775, 2765, 2779, 2782, 2780, 2782,    0, 2775,    0, 2792,
        0, 2779,  610, 2801, 2802, 2796, 2804, 2812, 2817, 2827,
     2830, 2838, 2835, 2836, 2870, 2860, 2869, 2871, 2872, 2886,
     2888, 2894, 2903, 2905, 2926, 2904, 2922, 2948, 2943, 2940,
     2954, 2959, 2957, 2962, 2980, 2988, 2976, 2997, 3002, 3014,
     3011, 3013, 3028, 3036, 3030, 3042, 3051, 3053, 3045, 3067,

     3066, 3068, 3079, 3084, 3101, 3105, 3110, 3133, 3102, 3134,
     3116, 3138, 3139, 3155, 3144, 3167, 3156, 3169, 3178, 3204,
     3195, 3179, 3212, 3209, 3227, 3228, 3230, 3233, 3249, 3262,
     3243, 3244, 3273, 3283, 3281, 3284, 3297, 3287, 3295, 3312,
     3323, 3318, 3326, 3321, 3335, 3337, 3347, 3349, 3360, 3366,
     3379, 3381, 3383, 3389, 3392, 3397, 3411, 3414, 3429, 3420,
     3423, 3432, 3437, 2808,  590,    0,    0, 2819,    0, 2945,
        0, 2978, 2995, 3056, 3076, 3075, 3174, 3190,    0, 3257,
     3411, 3437, 3428, 3446,    0, 3449, 3439, 3446, 3463, 3465,
     3451, 3453, 3455, 3467, 3476,    0,    0, 3460, 3470,    0,

     3481,    0,    0, 3470,    0,    0, 3471, 3487, 3474, 3482,
        0,    0,    0,    0, 3494, 3483, 3503, 3497, 3488,    0,
        0, 3505, 3493, 3494, 3508, 3505,    0, 3515, 3521, 3520,
     3505, 3518, 3524, 3529, 3514, 3516, 3516, 3541, 3543,    0,
     3540, 3542, 3542,    0, 3529, 3549, 3539, 3555,    0,    0,
      557, 3553, 3554, 3562, 3557, 3559, 3565, 3571, 3588, 3596,
     3593, 3607, 3626, 3597, 3605, 3637, 3628, 3651, 3659, 3642,
     3650, 3656, 3680, 3672, 3682, 3685, 3696, 3710, 3701, 3713,
     3726, 3714, 3735, 3739, 3749, 3745, 3768, 3747, 3758, 3764,
     3780, 3789, 3793, 3790, 3804, 3812, 3802, 3803, 3814, 3833,

     3838, 3842, 3847, 3852, 3866, 3844, 3857, 3868, 3887, 3890,
     3878, 3892, 3901, 3906, 3920, 3932, 3918, 3936, 3946, 3941,
     3944, 3960, 3954, 3976, 3970, 3978, 3986, 3989, 3994, 4004,
     4015, 4010, 4032, 4000, 4029, 3548,  551, 3576,    0, 3622,
     3661, 3652, 3677,    0, 3697,    0, 3728, 3752, 3764, 3784,
        0, 3804,    0, 3899,    0,    0,    0, 3995,    0, 4017,
     4019,    0,    0,    0,    0,    0, 4026, 4040, 4047,    0,
     4030,    0, 4041, 4054,    0, 4039, 4058, 4040,    0, 4065,
     4066, 4051, 4054,    0, 4060,    0, 4065,    0, 4077, 4078,
     4080, 4065,    0,    0,    0,    0, 4069, 4081, 4077,  550,

     4086, 4088, 4094, 4097, 4112, 4102, 4098, 4131, 4120, 4126,
     4150, 4156, 4137, 4142, 4171, 4160, 4174, 4166, 4182, 4185,
     4188, 4196, 4210, 4211, 4200, 4214, 4222, 4224, 4225, 4250,
     4228, 4260, 4239, 4254, 4262, 4278, 4288, 4273, 4276, 4279,
     4294, 4302, 4319, 4330, 4313, 4331, 4343, 4342, 4361, 4347,
     4380, 4386, 4385, 4384, 4371, 4396, 4397, 4401, 4402, 4434,
     4430,    0,  554,    0,    0,    0, 4128,    0,    0, 4206,
     4244,    0,    0, 4265, 4295,    0,    0,    0,    0, 4334,
     4331,    0,    0, 4335, 4387,    0,    0, 4377, 4387,    0,
        0, 4410,    0, 4422, 4430, 4424, 4440,    0,    0,    0,

      553, 4451, 4453, 4455, 4456, 4459, 4468, 4469, 4474, 4472,
     4484, 4485, 4493, 4487, 4490, 4509, 4518, 4524, 4523, 4526,
     4527, 4528, 4539, 4542, 4552, 4561, 4558, 4560, 4563, 4577,
     4582, 4593, 4614, 4596, 4598, 4601, 4612, 4615,  554, 4554,
        0, 4585,    0,    0, 4602,    0,    0, 4613,    0,    0,
        0, 4610, 4620, 4632,    0,  553, 4647, 4646, 4650, 4651,
     4652, 4668, 4655, 4664, 4676, 4680, 4681, 4685, 4686, 4709,
     4714, 4704,  540,    0, 4690,    0, 4705,    0,    0, 4711,
      536, 4722, 4730, 4735, 4738, 4739, 4740, 4743,  516,    0,
        0, 4728,  514, 4754, 4768, 4783,  509,    0,  506, 4771,

      477,  469,  468,  463,  458,  457,  451,  415,  412,  410,
      393,  359,  365,  362,  225,  213, 4902,    0, 4902, 4861,
     4866, 4871,  176, 4876, 4881, 4886, 4891, 4896,  174
    } ;

static const flex_int16_t yy_def[1230] =
    {   0,
     1219,    1, 1220, 1220, 1219,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1, 1221, 1221, 1219, 1219,
     1219, 1219, 1219, 1222, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1219, 1224, 1219, 1225, 1225, 1219, 1225, 1226, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1227, 1227,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80, 1225, 1219, 1223, 1223, 1219, 1223, 1219, 1219,
     1223, 1219, 1228, 1229, 1219, 1219, 1222, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1219, 1224, 1219, 1225,
     1225, 1225, 1226, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80, 1225, 1223, 1223, 1223, 1223, 1228, 1229, 1219,
     1219, 1219, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1225, 1225, 1225,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80, 1223, 1219,
     1219, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1225,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80, 1223, 1219, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1225,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80, 1223, 1219, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1225,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80, 1223, 1219, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1225,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80, 1219, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1225,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80, 1219, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1225,   80,   80,   80,   80,   80,   80,   80, 1219, 1223,
     1223, 1223, 1225,   80,   80,   80, 1219, 1223, 1225,   80,

     1219, 1225, 1219, 1225, 1219, 1225, 1219, 1225, 1219, 1225,
     1219, 1225, 1219, 1225, 1219, 1225, 1219, 1225,    0, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219
    } ;

static const flex_int16_t yy_nxt[4983] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   53,
       60,   53,   20,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   53,   60,   53,   61,
       64,   65,   66,   67,   68,   69,   70,   69,   69,   71,
       72,   73,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,   99,  100,  101,   95,
      102,   95,   64,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,   95,  102,   95,  103,
      104,   25,  104,   25,   25,  107,   25,  107,  109,   25,
      109,   25,   25,  110,   25,  110,   25,   25,  309,  105,
      127,  105,  118,   25,   25,  115,  115,  105,  155,  105,
      115,  115,  134,  119,  156,  111,  157,  106,  165,  106,

      166,  108,  111,  108,  158,  108,  105,  108,  105,  108,
      159,  108,  135,  108,  105,  155,  105,  123,  124,  134,
      108,  156,  111,  157,  106,  165,  106,  166,  108,  111,
      108,  158,  108, 1218,  108,  214,  108,  159,  108,  135,
      108,  211,  115,  115,  115, 1217,  215,  108,  112,  112,
      112,  112,  113,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  121,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  204,  205,  206,  219,  220,

      112,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  217,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  204,  205,  206,  115,  115,  112,  112,  112,
      112,  112,  113,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  128,  199,  129,  200,  136,  140,
      201,  313,  130,  141,  131,  137,  314,  142,  132,  133,
      202,  319,  138,  143, 1216,  139,  144, 1215,  203, 1214,
      112,  128,  199,  129,  200,  136,  140,  201,  313,  130,
      141,  131,  137,  314,  142,  132,  133,  202,  319,  138,

      143,  149,  139,  144,  145,  203,  146,  112,  320,  150,
      167,  147,  151, 1213,  168,  152,  148,  160,  153,  326,
      169,  154,  170,  161,  162,  163,  171, 1212,  149, 1211,
      164,  145,  172,  146, 1210,  320,  150,  167,  147,  151,
      173,  168,  152,  148,  160,  153,  326,  169,  154,  170,
      161,  162,  163,  171,  174,  181,  177,  164,  262,  172,
      175,  176,  340,  341,  178,  184,  182,  173,  179,  185,
     1209,  180,  183,  211,  115,  186, 1208, 1207,  223, 1206,
      223,  174,  181,  177, 1205,  262, 1204,  175,  176,  340,
      341,  178,  184,  182, 1203,  179,  185,  223,  180,  183,

      223,  187,  186,  188,  251,  223,  189,  223,  193,  331,
      252,  190,  194,  191,  192,  195,  196,  223,  317,  332,
      342,  318,  197,  343,  223,  198, 1202,  223,  187, 1201,
      188,  251, 1199,  189, 1197,  193,  331,  252,  190,  194,
      191,  192,  195,  196,  223,  317,  332,  342,  318,  197,
      343, 1193,  198,  210,  210, 1189,  210,  210,  210,  210,
      210,  210,  210,  210,  210, 1181, 1173, 1156, 1139, 1101,
     1063,  302, 1000,  324,  223,  210,  210,  210,  210,  223,
      325,  241,  224,  242,  225,  344,  345,  315,  243,  261,
      226,  223,  227,  244,  223,  316,  228,  229,  302,  223,

      324,  223,  346,  352,  353,  937,  223,  325,  241,  224,
      242,  225,  344,  345,  315,  243,  261,  226,  223,  227,
      244,  223,  316,  228,  229,  851,  223,  354,  765,  346,
      352,  353,  210,  210,  210,  653,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  232,  333,  541,  355,  223,
      540,  334,  233,  426,  354,  210,  210,  210,  210,  234,
      236,  263,  235,  230,  237,  264,  321,  322,  238,  223,
      356,  265,  232,  333,  239,  355,  223,  240,  334,  233,
      323,  223,  425,  231,  223,  311,  234,  236,  263,  235,
      230,  237,  264,  321,  322,  238,  223,  356,  265,  357,

      310,  239,  358,  303,  240,  266,  222,  323,  223,  267,
      231,  223,  210,  245,  253,  268,  359,  223,  223,  362,
      360,  246,  254,  361,  247,  223,  357,  248,  255,  358,
      249,  221,  266,  250,  363,  210,  267,  223,  223,  212,
      245,  253,  268,  359,  223,  223,  362,  360,  246,  254,
      361,  247,  223,  209,  248,  255,  364,  249,  269,  207,
      250,  363,  223,  365,  223,  223,  223,  256,  223,  273,
      370,  371,  270,  257,  258,  259,  372,  274,  271,  272,
      260,  275,  223,  364,  276,  269,  223,  126,  223,  223,
      365,  373,  379,  223,  256,  223,  273,  370,  371,  270,

      257,  258,  259,  372,  274,  271,  272,  260,  275,  223,
      277,  276,  280,  223,  223,  223,  281,  125,  373,  379,
      298,  278,  282,  374,  223,  375,  223,  279,  299,  300,
      301,  116,  223, 1219,  223,   63,   63,  277,  380,  280,
     1219,  223, 1219,  281,  223, 1219,  223,  298,  278,  282,
      374,  223,  375,  223,  279,  299,  300,  301,  335,  223,
      336,  223,  283,  337,  284,  380,  381,  285,  223,  338,
      382,  223,  286,  223,  287,  288,  339,  295,  383,  296,
      384,  385,  297,  386,  223,  335,  387,  336,  223,  283,
      337,  284, 1219,  381,  285,  223,  338,  382, 1219,  286,

     1219,  287,  288,  339,  295,  383,  296,  384,  385,  297,
      386,  223,  289,  387,  388,  223,  290,  389,  390,  291,
      292,  396,  187,  128,  305,  129,  293,  189,  397,  294,
      398,  130,  190,  131,  191,  192,  223,  132,  304,  289,
     1219,  388, 1219,  290,  389,  390,  291,  292,  396,  187,
      128,  305,  129,  293,  189,  397,  294,  398,  130,  190,
      131,  191,  192,  223,  132,  304,  187,  128,  306,  129,
      391,  189,  402,  403,  392,  130,  190,  131,  191,  192,
      404,  132,  307,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  187,  128,  306,  129,  391,  189,  402,

      403,  392,  130,  190,  131,  191,  192,  404,  132,  307,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      121,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  327,  328,  329,  347,  330,  348,  376,  366,  377,
      349, 1219,  405, 1219,  406,  407, 1219,  350,  367,  409,
      378,  351, 1219,  368,  369,  393,  408,  410,  327,  328,
      329,  347,  330,  348,  376,  366,  377,  349,  394,  405,
      399,  406,  407,  395,  350,  367,  409,  378,  351,  400,
      368,  369,  393,  408,  410,  411,  414,  401,  412,  415,
      416,  417,  418,  422,  420,  394,  423,  399,  419,  424,

      395,  320,  320,  542,  543,  544,  400,  421,  413, 1219,
     1219, 1219,  411,  414,  401,  412,  415,  416,  417,  418,
      422,  420, 1219,  423, 1219,  419,  424, 1219,  320,  320,
      542,  543,  544, 1219,  421,  413,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  217,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  223,  428,  223,
      223,  223,  545, 1219, 1219, 1219,  432, 1219,  430,  433,
      223, 1219,  435,  546,  223,  429,  431,  223,  223,  223,
      223,  223, 1219, 1219,  223,  428,  223,  223,  223,  545,

      223,  434,  223,  432,  223,  430,  433,  223,  223,  435,
      546,  223,  429,  431,  223,  223,  223,  223,  223,  223,
      436,  437,  223,  223,  547,  548, 1219,  223,  434,  223,
      439,  223,  441,  223,  438,  223,  223,  440, 1219,  223,
      442,  443,  444,  223,  445,  446,  223,  436,  437,  223,
      223,  547,  548,  223,  549,  447,  223,  439,  223,  441,
      223,  438,  553,  223,  440,  223,  223,  442,  443,  444,
      223,  445,  446,  448,  223,  223,  223,  554,  449, 1219,
      223,  549,  447,  223, 1219,  223,  458,  455,  456,  553,
     1219,  457,  223, 1219,  223,  223,  223, 1219, 1219, 1219,

      448,  223,  223,  223,  554,  449,  450,  461,  451,  223,
      223,  452,  223,  458,  455,  456,  555,  453,  457,  460,
      223,  223,  223,  223,  454,  223,  459, 1219,  556,  223,
      223, 1219,  223,  450,  461,  451,  223,  223,  452,  223,
      223, 1219,  223,  555,  453,  223,  460,  223,  462,  467,
      463,  454,  223,  459,  464,  556,  223,  223,  223,  223,
      223,  465,  223,  557,  223,  466, 1219,  223,  469,  223,
      223,  468,  223,  470,  558,  462,  467,  463,  223,  223,
      223,  464,  559,  223,  223,  223,  472,  223,  465,  223,
      557,  223,  466,  471,  223,  469,  560,  223,  468,  223,

      470,  558,  223,  223,  473,  223,  223,  223, 1219,  559,
      223,  223,  474,  472,  223,  561,  223,  223,  223, 1219,
      471,  223,  223,  560,  562,  477,  223,  563,  564,  223,
      223,  473,  475,  478, 1219,  476,  223,  223,  223,  474,
     1219,  223,  561,  223,  223,  223,  223,  223, 1219,  223,
      479,  562,  477,  567,  563,  564, 1219, 1219,  480,  475,
      478,  223,  476,  223,  223,  223,  223,  223,  481,  223,
      485,  223,  223,  223,  223,  486,  568,  479,  482, 1219,
      567,  223, 1219,  483,  484,  480,  223,  488,  223,  223,
      569,  223,  487,  223,  223,  481,  223,  485,  223,  223,

      565,  223,  486,  568,  570,  482,  223,  489,  223,  490,
      483,  484,  223,  223,  488,  566,  223,  569,  223,  487,
      223,  223,  491, 1219,  492,  494,  223,  565,  223,  495,
     1219,  570,  223,  223,  489,  493,  490,  223, 1219,  223,
      223,  223,  566,  223,  499,  223,  223,  223,  223,  491,
      496,  492,  494,  223,  571,  572,  495,  223,  497,  223,
      498,  223,  493,  223,  223,  223,  223,  223,  223,  573,
      223,  499,  223,  223,  500,  223,  501,  496,  223,  502,
      223,  571,  572, 1219,  223,  497,  223,  498,  223,  223,
      223, 1219,  223,  223,  399,  223,  573,  223,  223,  574,

      223,  500,  223,  501,  503,  223,  502,  223,  505,  223,
      504,  401,  223,  223,  506, 1219,  223,  223,  507, 1219,
     1219,  399,  223, 1219,  223,  223,  574,  223,  223,  508,
      511,  503,  223,  223,  223,  505,  223,  504,  401,  223,
      575,  506,  509,  223,  223,  507,  223,  510,  223,  513,
      512, 1219, 1219,  223, 1219,  223,  508,  511,  223,  223,
      223,  223,  514,  223,  223, 1219,  223,  575,  516,  509,
      223,  576,  577,  223,  510,  223,  513,  512,  223,  515,
      223,  223,  523,  517,  223,  223,  578,  223,  519,  514,
      223,  223,  223,  223,  518,  516,  223,  520,  576,  577,

      223,  223,  223, 1219,  524,  223,  515,  223,  223,  523,
      517,  223,  223,  578,  223,  519,  223,  223, 1219,  223,
      223,  518,  223,  223,  520,  521,  526,  223,  223,  223,
      223,  524,  579,  525,  223,  580,  522,  223,  581,  223,
     1219,  223,  223,  223,  223,  528,  527,  223,  529,  223,
      223, 1219,  521,  526,  223,  530,  223,  223,  531,  579,
      525,  223,  580,  522,  223,  581,  534,  536,  223,  223,
      582,  223,  528,  527,  223,  529,  223,  223,  532,  535,
      223,  223,  530,  223,  533,  531,  223,  223,  223, 1219,
     1219,  223,  538,  534,  536,  537,  223,  582,  223,  583,

      223,  223,  584,  223,  585,  532,  535,  223,  399,  586,
      587,  533,  588,  223,  223,  589,  223,  539,  223,  538,
      590, 1219,  537,  223,  591,  401,  583,  223, 1219,  584,
     1219,  585, 1219, 1219, 1219,  399,  586,  587,  592,  588,
      593,  594,  589,  223,  539,  595,  550,  590,  551,  598,
      599,  591,  401,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  552,  596,  592,  600,  593,  594,  601,
      602,  603,  595,  550,  597,  551,  598,  599,  604,  605,
      606,  607,  608,  609,  610,  611,  612,  613,  614,  615,
      552,  596,  616,  600,  617,  618,  601,  602,  603,  619,

      620,  597,  621,  622,  623,  604,  605,  606,  607,  608,
      609,  610,  611,  612,  613,  614,  615,  624,  625,  616,
      626,  617,  618,  627,  628,  629,  619,  620,  630,  621,
      622,  623,  631,  632,  633,  634,  635,  636,  639,  637,
      640,  641,  642,  643,  624,  625,  644,  626,  638,  645,
      627,  628,  629,  647,  648,  630,  651,  652, 1219,  631,
      632,  633,  634,  635,  636,  639,  637,  640,  641,  642,
      643,  646, 1219,  644,  649,  638,  645,  223,  650,  654,
      647,  648,  223,  651,  652,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  655,  223,  223,  646,  223,

      223,  649,  223,  656,  223,  650,  654,  657,  223,  223,
      764,  223, 1219,  223, 1219,  223,  223,  659, 1219, 1219,
      223,  223,  655,  223,  223,  223,  223,  223,  223,  223,
      656,  223,  661,  223,  657,  223,  223,  764,  223,  660,
      223,  223,  223,  223,  659,  223,  658,  223,  223,  223,
      766, 1219,  223, 1219,  223,  223,  223, 1219,  223,  661,
      223, 1219,  662,  223,  663,  666,  660,  665,  223,  223,
      223, 1219,  223,  658,  223, 1219,  223,  766,  667,  664,
      223,  223,  223,  223,  223, 1219, 1219, 1219,  672,  662,
      223,  663,  666, 1219,  665,  668,  223,  223,  223,  670,

      223,  223,  669,  223,  677,  667,  664,  223,  223,  223,
     1219,  223,  671,  223,  223,  672,  767,  223,  223,  678,
      674,  768,  668,  223,  223,  223,  670,  223,  673,  669,
      223,  677,  223,  223,  223,  223,  675,  680,  676,  671,
      223,  223,  223,  767, 1219,  223,  678,  674,  768, 1219,
      223,  223,  223,  223,  679,  673,  223,  223,  684,  223,
      223,  223,  223,  675,  680,  676,  223,  682,  681,  223,
      223,  223, 1219,  223, 1219, 1219,  223,  683,  223,  223,
      223,  679,  686,  223,  223,  684,  223, 1219,  685,  223,
      223,  223,  223,  223,  682,  681,  223,  223,  223,  687,

      223,  223,  223,  223,  683,  223, 1219,  223,  769,  686,
      688,  223,  223,  223,  689,  685,  223,  223,  223,  223,
      692,  223,  223,  223,  690,  223,  687,  223,  223,  223,
      770,  223,  771,  694,  223,  769,  691,  688,  223,  223,
      223,  689,  223,  223,  772,  223,  693,  692,  223,  223,
      223,  690,  223, 1219,  223,  223,  223,  770,  223,  771,
      694, 1219,  696,  691,  695,  697,  223,  223,  223,  223,
      223,  772,  223,  693,  223,  223,  223,  223,  223,  702,
      223,  699,  223,  223,  700, 1219,  223, 1219,  223,  696,
      698,  695,  697,  223,  223,  223,  705,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  702,  223,  699,  706,
      703,  700,  223,  223,  701,  223,  223,  698,  707,  223,
      708,  223,  704,  705,  223,  223,  223,  223,  223,  223,
      709,  223,  223,  223,  223, 1219,  706,  703,  223,  223,
      223,  701,  711,  223,  710,  707,  223,  708,  223,  704,
      713,  223,  773,  223,  223,  223,  223,  709,  223,  223,
      223,  223,  223,  715,  223,  223,  714,  223,  716,  711,
      223,  710,  223,  712,  223,  223,  717,  713,  223,  773,
      223,  223,  223, 1219,  223,  223,  223,  223,  718,  223,
      715,  223,  223,  714,  223,  716,  223,  223,  223,  223,

      712,  223,  720,  717,  223,  223,  223,  223, 1219,  223,
      223,  223,  719,  223,  223,  718,  223,  722,  223,  223,
      721,  223,  223,  223,  223,  223,  223, 1219,  725,  720,
      223,  223,  726,  223,  223,  723,  774,  223, 1219,  719,
      724, 1219,  223,  223,  722,  223,  223,  721,  223,  223,
      727,  223,  223,  223,  223,  725,  223,  223,  223,  726,
      223, 1219,  723,  774,  732,  728,  730,  724,  223,  223,
     1219,  729, 1219,  223,  223,  223,  223,  727,  223,  223,
      223,  223,  223,  223,  223,  223,  736,  223,  223,  731,
     1219,  732,  728,  730,  223,  223, 1219,  734,  729,  733,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  736,  223,  223,  731,  735,  737,  739,
      223,  223,  223,  223,  734,  775,  733,  223,  223,  223,
      223,  223,  223,  223, 1219,  223,  223,  223,  740,  223,
      738,  223,  223,  223,  735,  737,  739,  223, 1219,  223,
      223,  741,  775,  223, 1219,  223,  223,  223, 1219,  223,
      742,  223,  223,  223,  746,  740,  223,  738, 1219,  223,
      223,  776,  743,  223,  223,  745,  223,  744,  741, 1219,
      223,  223,  223,  223,  223,  747,  223,  742,  223,  223,
     1219,  746, 1219,  223,  223,  223,  223,  748,  776,  743,

      223,  223,  745,  223,  744,  750,  749,  751,  223,  223,
      223,  223,  747,  223,  753,  223,  223,  223,  223,  223,
      752,  223,  223,  223,  748,  754,  756, 1219,  223,  777,
      223,  223,  750,  749,  751,  755,  223,  223,  223,  223,
     1219,  753,  223,  223,  223,  223,  223,  752,  757,  758,
      778,  223,  754,  756,  223,  223,  777,  223,  223,  223,
      223,  779,  755,  223,  223,  223,  223,  762,  760,  759,
      780,  781,  761,  763,  223,  757,  758,  778,  223,  223,
      223,  223,  782,  783,  223,  784,  223,  223,  779,  785,
      786,  223,  787,  788,  762,  760,  759,  780,  781,  761,

      763,  223,  789,  790,  791,  792,  223,  223,  793,  782,
      783,  223,  784,  794,  795,  796,  785,  786,  797,  787,
      788,  798,  799,  800,  801,  802,  803,  804,  805,  789,
      790,  791,  792,  806,  807,  793,  808,  810,  811,  812,
      794,  795,  796,  813,  816,  797,  817,  809,  798,  799,
      800,  801,  802,  803,  804,  805,  814,  815,  818,  819,
      806,  807,  820,  808,  810,  811,  812,  821,  822,  823,
      813,  816,  824,  817,  809,  825,  826,  827,  828,  829,
      830,  831,  832,  814,  815,  818,  819,  833,  834,  820,
      835,  836,  837,  838,  821,  822,  823,  839,  840,  824,

      841,  842,  825,  826,  827,  828,  829,  830,  831,  832,
      843,  844,  845,  846,  833,  834,  847,  835,  836,  837,
      838,  848,  849,  850,  839,  840,  223,  841,  842, 1219,
     1219,  223,  223, 1219,  223, 1219,  936,  843,  844,  845,
      846, 1219,  223,  847,  852,  853,  854,  223,  848,  849,
      850,  223,  223,  223,  855,  856,  857,  858,  223,  223,
      223,  223,  223,  936,  859,  223,  223,  223,  223,  223,
      938,  852,  853,  854,  223, 1219, 1219,  223,  223,  223,
      223,  855,  856,  857,  858,  223,  223,  223,  223,  223,
      223,  859,  223,  223,  223,  223,  860,  938,  861,  223,

      223,  223,  223,  862,  223, 1219, 1219,  223, 1219, 1219,
      223, 1219,  223,  223,  863,  223,  223,  223,  223,  223,
      223,  223,  223,  860,  223,  861,  223,  223,  223,  223,
      862,  864,  865,  223,  223,  223,  223,  223,  223,  866,
     1219,  863,  867,  223,  223,  223,  223,  223,  223,  223,
      869,  223,  223,  223,  223,  223,  223, 1219,  864,  865,
      223,  223,  223,  223,  868,  223,  866,  870,  873,  867,
      223,  223,  223,  223,  871,  939,  223,  869,  223,  223,
      223,  223,  223,  223,  223, 1219,  872,  223,  874,  223,
      223,  868,  223,  223,  870,  873,  875,  223,  223,  223,

      223,  871,  939,  223,  223,  223,  223,  223,  940,  223,
      223,  223,  223,  872,  223,  874,  223,  223,  223,  223,
      223,  876,  878,  875,  941,  223,  223,  223,  880,  877,
      223,  223,  223,  223,  223,  940,  223,  223,  223,  223,
      881,  882,  879,  223,  223,  223, 1219,  223,  876,  878,
     1219,  941,  223,  223,  223,  880,  877,  223,  223,  223,
      223,  223,  884,  223,  223,  223,  223,  881,  882,  879,
      223,  223,  223,  883,  223,  223, 1219,  885,  223,  223,
      223,  223, 1219,  223,  942,  223,  223,  223,  223,  884,
      223,  223,  223,  223,  886,  223,  223,  223,  223,  223,

      883,  223,  223,  223,  885,  223,  887,  223,  223,  889,
      223,  942,  888,  223,  223,  943,  223,  223,  223,  223,
      944,  886,  223,  223,  223,  223, 1219,  890,  223,  223,
      223,  223,  223,  887,  223,  223,  889, 1219, 1219,  888,
      223,  223,  943,  223,  223,  223,  223,  944,  892, 1219,
      891,  223,  223,  893,  890,  223,  223, 1219,  223,  223,
      223,  223,  223,  223,  223,  894,  223,  223,  223,  223,
     1219,  896, 1219,  223,  223,  892,  895,  891,  223,  223,
      893, 1219,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  894,  223,  223,  223,  223,  223,  896,  899,

      897,  223, 1219,  895,  898,  223,  223, 1219,  223,  223,
      223,  223,  223,  223,  945,  223,  223,  223, 1219,  223,
      946,  223,  900,  901,  223,  223,  899,  897,  223,  223,
     1219,  898,  223,  223,  223,  223,  223,  902,  903,  905,
      904,  945,  223, 1219,  223,  223,  223,  946, 1219,  900,
      901, 1219,  223, 1219,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  902,  903,  905,  904,  908,  223,
      906,  907,  223,  223,  223,  909, 1219,  223,  223,  223,
      223,  223,  911,  223,  223,  223,  223,  223,  910,  223,
      223,  947,  223,  223,  223,  908, 1219,  906,  907,  223,

      223,  223,  909,  223,  223,  223,  223,  223,  914,  911,
      223,  223,  223,  223,  223,  910,  912,  223,  947,  223,
      223,  223,  915,  223, 1219,  223,  223,  223,  913, 1219,
      223,  223,  917,  223,  223,  914,  916,  223,  223,  223,
      223,  223,  918,  912,  223,  223, 1219,  223,  920,  915,
      223,  223,  223,  223,  223,  913,  223,  919,  223,  917,
      223,  223,  223,  916,  223,  223,  921,  223,  223,  918,
     1219,  223,  223,  223,  223,  920,  223,  223,  223,  223,
      223,  922, 1219,  223,  919,  223, 1219,  223,  924,  223,
      223,  923,  223,  921,  223,  223,  223,  223,  223,  223,

      223, 1219, 1219,  223,  223,  925,  223,  927,  922,  223,
      223,  223,  223,  223,  223,  924,  223,  223,  923,  223,
     1219,  929,  930,  223,  223,  926,  223,  223,  928,  223,
      931,  223,  925,  223,  927, 1219,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  932,  223,  223,  929,  930,
      223,  948,  926,  934,  223,  928,  223,  931,  223,  223,
      223,  223,  223,  949,  223,  950,  223,  223,  223,  223,
      223,  223,  932,  223,  223,  933,  951,  223,  948,  223,
      934,  935,  223,  952,  953,  954,  223,  223,  223,  223,
      949,  223,  950,  955,  223,  956,  957,  223,  958,  959,

      223,  960,  933,  951,  961,  962,  223,  963,  935,  223,
      952,  953,  954,  964,  223,  965,  966,  967,  968,  970,
      955,  969,  956,  957,  971,  958,  959,  972,  960,  973,
      974,  961,  962,  975,  963,  976,  977,  978,  979,  980,
      964,  981,  965,  966,  967,  968,  970,  982,  969,  983,
      984,  971,  985,  986,  972,  987,  973,  974,  988,  989,
      975,  990,  976,  977,  978,  979,  980,  991,  981,  992,
      993,  994,  995,  996,  982,  997,  983,  984,  998,  985,
      986,  999,  987,  223,  223,  988,  989,  223,  990, 1002,
     1219, 1219,  223, 1062,  991,  223,  992,  993,  994,  995,

      996, 1003,  997,  223,  223,  998, 1064,  223,  999,  223,
      223,  223,  223, 1001,  223,  223, 1002, 1004,  223,  223,
     1062,  223,  223,  223, 1005, 1219,  223, 1009, 1003, 1219,
      223,  223, 1006, 1064,  223,  223,  223,  223,  223,  223,
     1001, 1219,  223,  223, 1004,  223,  223,  223,  223, 1219,
      223, 1005, 1007,  223, 1009,  223,  223,  223,  223, 1006,
     1219, 1065,  223, 1219,  223,  223, 1008,  223, 1011, 1219,
      223, 1010, 1014,  223,  223, 1219,  223, 1012,  223, 1007,
      223,  223,  223,  223,  223,  223,  223,  223, 1065,  223,
     1015, 1066,  223, 1008,  223, 1011, 1013, 1067, 1010, 1014,

      223,  223,  223,  223, 1012,  223,  223,  223,  223,  223,
      223, 1017, 1018,  223,  223, 1019,  223, 1015, 1066,  223,
     1219, 1068,  223, 1013, 1067, 1016,  223,  223,  223,  223,
      223,  223,  223,  223, 1069,  223,  223,  223, 1017, 1018,
      223, 1020, 1019,  223,  223, 1022,  223, 1023, 1068,  223,
     1219,  223, 1016,  223, 1024, 1021,  223,  223,  223,  223,
      223, 1069,  223,  223,  223,  223, 1070,  223, 1020,  223,
      223,  223, 1022,  223, 1023,  223,  223,  223,  223,  223,
     1071, 1024, 1021,  223, 1025,  223, 1026,  223,  223,  223,
      223,  223,  223, 1070,  223,  223,  223,  223,  223,  223,

     1027, 1072,  223,  223,  223, 1219,  223, 1071,  223, 1028,
      223, 1025,  223, 1026,  223,  223,  223, 1219,  223,  223,
     1030,  223,  223,  223,  223,  223,  223, 1027, 1072, 1073,
      223, 1074,  223,  223,  223,  223, 1028,  223, 1029,  223,
      223,  223,  223,  223,  223,  223,  223, 1030, 1031, 1033,
      223, 1032,  223,  223,  223, 1219, 1073,  223, 1074,  223,
      223,  223,  223,  223,  223, 1029,  223,  223, 1034,  223,
      223,  223,  223, 1036,  223, 1031, 1033,  223, 1032,  223,
      223,  223,  223,  223, 1219, 1037, 1035,  223,  223,  223,
      223,  223,  223, 1219,  223, 1034,  223,  223, 1039,  223,

     1036,  223,  223, 1219,  223, 1219, 1219,  223, 1042,  223,
      223, 1038, 1037, 1035,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223, 1039, 1043, 1075,  223,  223,
     1040,  223, 1044, 1041,  223, 1042,  223,  223, 1038, 1219,
      223, 1219,  223,  223,  223,  223, 1045,  223,  223,  223,
      223,  223, 1047, 1043, 1075,  223,  223, 1040,  223, 1044,
     1041, 1046,  223,  223,  223, 1048,  223,  223,  223,  223,
      223,  223, 1049, 1045,  223,  223,  223,  223,  223, 1047,
     1053, 1219,  223,  223,  223, 1050,  223, 1051, 1046,  223,
      223,  223, 1048,  223,  223,  223,  223,  223,  223, 1049,

      223,  223, 1054,  223,  223, 1052,  223, 1053, 1055,  223,
      223,  223, 1050,  223, 1051, 1056,  223,  223,  223, 1057,
      223,  223, 1219,  223,  223, 1076,  223,  223,  223, 1054,
      223,  223, 1052,  223,  223, 1055,  223,  223, 1219,  223,
      223, 1059, 1056,  223,  223,  223, 1057,  223, 1058, 1060,
      223,  223, 1076,  223,  223,  223, 1077,  223, 1061,  223,
      223,  223,  223,  223, 1078,  223,  223,  223, 1059, 1079,
     1080,  223,  223, 1081, 1082, 1058, 1060,  223, 1083,  223,
     1084,  223,  223, 1077, 1085, 1061,  223,  223, 1086,  223,
     1087, 1078,  223, 1088, 1089, 1090, 1079, 1080, 1091, 1092,

     1081, 1082, 1093, 1094, 1095, 1083,  223, 1084, 1096,  223,
     1097, 1085, 1098, 1099, 1100, 1086, 1102, 1087,  223, 1219,
     1088, 1089, 1090, 1219,  223, 1091, 1092, 1104,  223, 1093,
     1094, 1095,  223, 1103, 1219, 1096,  223, 1097,  223, 1098,
     1099, 1100,  223, 1102,  223,  223, 1106,  223,  223, 1219,
      223,  223,  223, 1219, 1104,  223,  223, 1105, 1140,  223,
     1103,  223,  223,  223, 1108,  223, 1219,  223, 1107,  223,
      223,  223,  223, 1106,  223,  223,  223,  223, 1109,  223,
      223,  223, 1111,  223, 1105, 1140,  223,  223,  223,  223,
      223, 1108,  223, 1110,  223, 1107,  223,  223, 1112,  223,

      223,  223, 1113,  223,  223, 1109,  223,  223,  223, 1111,
      223, 1219,  223,  223,  223,  223,  223,  223, 1114,  223,
     1110,  223, 1219,  223,  223, 1112,  223,  223,  223, 1113,
      223,  223,  223,  223, 1219,  223, 1141,  223,  223,  223,
      223,  223,  223,  223,  223, 1114,  223, 1219,  223, 1115,
      223,  223,  223,  223,  223,  223, 1116,  223, 1118,  223,
      223,  223,  223, 1141,  223,  223, 1219,  223,  223,  223,
     1142,  223,  223,  223,  223,  223, 1115,  223,  223,  223,
      223,  223,  223, 1116,  223, 1118, 1119,  223,  223,  223,
      223,  223,  223, 1117, 1219, 1143,  223, 1142, 1120,  223,

      223,  223,  223,  223,  223,  223,  223,  223,  223, 1124,
      223,  223,  223, 1119, 1122, 1121,  223,  223,  223,  223,
     1117, 1123, 1143,  223,  223, 1120,  223,  223,  223,  223,
      223,  223,  223,  223, 1219,  223, 1124,  223,  223,  223,
     1144, 1122, 1121,  223, 1125,  223, 1219, 1126, 1123,  223,
      223,  223,  223,  223, 1219,  223,  223, 1128, 1127,  223,
      223,  223, 1145,  223, 1219,  223, 1219, 1144, 1146,  223,
      223, 1125,  223,  223, 1126, 1129,  223,  223, 1147,  223,
      223,  223, 1130, 1219, 1128, 1127, 1219,  223,  223, 1145,
      223,  223,  223,  223, 1219, 1146,  223,  223, 1131,  223,

      223,  223, 1129, 1219,  223, 1147, 1132,  223,  223, 1130,
      223,  223, 1133, 1134,  223,  223,  223, 1148,  223,  223,
      223,  223, 1149, 1150,  223, 1131,  223,  223,  223, 1135,
      223,  223,  223, 1132,  223,  223,  223,  223,  223, 1133,
     1134,  223,  223,  223, 1148, 1136,  223,  223,  223, 1149,
     1150,  223,  223,  223,  223, 1151, 1135,  223,  223,  223,
      223,  223,  223,  223,  223, 1152, 1137, 1138, 1153, 1154,
     1155, 1219, 1136,  223,  223, 1219, 1219, 1219,  223,  223,
      223,  223, 1151,  223,  223,  223, 1157,  223, 1219,  223,
     1219,  223, 1152, 1137, 1138, 1153, 1154, 1155,  223, 1158,

     1159,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223, 1157,  223, 1160,  223,  223,  223,  223,
      223, 1219,  223,  223,  223,  223, 1158, 1159,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223, 1161,  223,
      223,  223, 1160,  223,  223,  223,  223,  223,  223,  223,
      223,  223, 1162,  223,  223, 1219,  223,  223,  223,  223,
     1163,  223,  223, 1219,  223, 1161,  223,  223,  223, 1165,
      223, 1164,  223,  223,  223,  223,  223,  223,  223, 1162,
      223,  223,  223,  223,  223,  223,  223, 1163,  223,  223,
      223,  223,  223,  223, 1167,  223, 1165, 1174, 1164,  223,

      223,  223,  223,  223,  223,  223, 1166,  223,  223,  223,
      223,  223,  223,  223, 1219,  223,  223,  223,  223,  223,
      223, 1167, 1168,  223, 1174, 1219,  223,  223, 1172,  223,
     1175,  223,  223, 1166,  223,  223, 1169,  223,  223,  223,
      223, 1171,  223,  223,  223,  223,  223, 1176,  223, 1168,
      223,  223, 1170,  223,  223, 1172, 1177, 1175,  223,  223,
     1178, 1179,  223, 1169,  223,  223, 1180, 1219, 1171,  223,
      223,  223,  223,  223, 1176,  223,  223,  223,  223, 1170,
      223,  223,  223, 1177, 1219,  223, 1219, 1178, 1179,  223,
     1182,  223,  223, 1180,  223, 1183,  223,  223,  223, 1219,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223, 1184,  223,  223,  223, 1182,  223, 1185,
     1190,  223, 1183,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223, 1186,  223,  223,  223,
     1184,  223,  223,  223,  223,  223, 1185, 1190, 1188, 1191,
     1187, 1192,  223,  223,  223, 1219, 1219,  223,  223,  223,
     1194,  223,  223, 1186,  223,  223,  223, 1198,  223,  223,
      223,  223,  223,  223, 1219, 1188, 1191, 1187, 1192,  223,
      223,  223, 1195, 1196,  223,  223,  223, 1194,  223,  223,
      223,  223,  223,  223, 1198,  223,  223,  223,  223,  223,

      223,  223, 1219, 1219,  223, 1219, 1219,  223, 1219, 1195,
     1196,  223,  223,  223, 1219,  223,  223,  223,  223, 1219,
      223,  223, 1200, 1219, 1219,  223, 1219, 1219,  223, 1219,
     1219,  223, 1219,  223, 1219, 1219, 1219, 1219, 1219, 1219,
      223, 1219, 1219, 1219, 1219,  223, 1219, 1219,  223, 1200,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
      223,   62,   62,   62,   62,   62,  114,  114,  114,  114,
      114,  117, 1219, 1219,  117,  117,  208,  208,  208, 1219,
      208,  210, 1219,  210,  210,  210,  213, 1219,  213,  213,
      213,  223, 1219,  223,  223,  223,  308, 1219, 1219,  308,

      308,   19, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219
    } ;

static const flex_int16_t yy_chk[4983] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    8,    8,    9,    9,   10,   10,   11,   11,
       12,   12,   13,   13,   14,   14,   15,   15, 1229,    7,
     1223,    8,   30,   16,   16,   21,   21,   11,   43,   12,
       22,   22,   38,   30,   43,   15,   44,    7,   46,    8,

       47,    9,   16,   10,   44,   11,    7,   12,    8,   13,
       44,   14,   38,   15,   11,   43,   12,   34,   34,   38,
       16,   43,   15,   44,    7,   46,    8,   47,    9,   16,
       10,   44,   11, 1216,   12,   72,   13,   44,   14,   38,
       15,   65,   65,   66,   66, 1215,   72,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   59,   59,   60,   76,   76,

       17,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   59,   59,   60,  115,  115,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   37,   57,   37,   57,   39,   40,
       57,  128,   37,   40,   37,   39,  129,   40,   37,   37,
       58,  132,   39,   40, 1214,   39,   40, 1213,   58, 1212,
       18,   37,   57,   37,   57,   39,   40,   57,  128,   37,
       40,   37,   39,  129,   40,   37,   37,   58,  132,   39,

       40,   42,   39,   40,   41,   58,   41,   18,  133,   42,
       48,   41,   42, 1211,   48,   42,   41,   45,   42,  137,
       48,   42,   49,   45,   45,   45,   49, 1210,   42, 1209,
       45,   41,   49,   41, 1208,  133,   42,   48,   41,   42,
       50,   48,   42,   41,   45,   42,  137,   48,   42,   49,
       45,   45,   45,   49,   50,   52,   51,   45,   89,   49,
       50,   50,  142,  142,   51,   54,   52,   50,   51,   54,
     1207,   51,   52,  211,  211,   54, 1206, 1205,   89, 1204,
       95,   50,   52,   51, 1203,   89, 1202,   50,   50,  142,
      142,   51,   54,   52, 1201,   51,   54,   85,   51,   52,

       95,   55,   54,   55,   85,   89,   55,   95,   56,  139,
       85,   55,   56,   55,   55,   56,   56,   85,  131,  139,
      143,  131,   56,  144,   85,   56, 1199,   95,   55, 1197,
       55,   85, 1193,   55, 1189,   56,  139,   85,   55,   56,
       55,   55,   56,   56,   85,  131,  139,  143,  131,   56,
      144, 1181,   56,   79,   79, 1173,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 1156, 1139, 1101, 1063, 1000,
      937,  102,  851,  136,   83,   79,   79,   79,   79,   88,
      136,   83,   79,   83,   79,  145,  146,  130,   83,   88,
       79,  102,   79,   83,   83,  130,   79,   79,  102,   88,

      136,   83,  147,  149,  150,  765,   88,  136,   83,   79,
       83,   79,  145,  146,  130,   83,   88,   79,  102,   79,
       83,   83,  130,   79,   79,  653,   88,  151,  541,  147,
      149,  150,   79,   80,   80,  426,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   81,  140,  311,  152,   81,
      308,  140,   81,  215,  151,   80,   80,   80,   80,   81,
       82,   90,   81,   80,   82,   90,  134,  134,   82,   81,
      153,   90,   81,  140,   82,  152,   81,   82,  140,   81,
      134,   90,  213,   80,   82,  119,   81,   82,   90,   81,
       80,   82,   90,  134,  134,   82,   81,  153,   90,  154,

      117,   82,  155,  103,   82,   91,   78,  134,   90,   91,
       80,   82,   80,   84,   86,   91,  156,   84,   86,  158,
      157,   84,   86,  157,   84,   91,  154,   84,   86,  155,
       84,   77,   91,   84,  159,   68,   91,   84,   86,   67,
       84,   86,   91,  156,   84,   86,  158,  157,   84,   86,
      157,   84,   91,   63,   84,   86,  161,   84,   92,   61,
       84,  159,   92,  162,   84,   86,   87,   87,   93,   93,
      164,  165,   92,   87,   87,   87,  166,   93,   92,   92,
       87,   93,   92,  161,   93,   92,   87,   36,   93,   92,
      162,  167,  170,   87,   87,   93,   93,  164,  165,   92,

       87,   87,   87,  166,   93,   92,   92,   87,   93,   92,
       94,   93,   96,   87,   94,   93,   96,   35,  167,  170,
      100,   94,   96,  168,  100,  168,  101,   94,  100,  101,
      101,   23,   96,   19,   94,    4,    3,   94,  171,   96,
        0,   94,    0,   96,  100,    0,  101,  100,   94,   96,
      168,  100,  168,  101,   94,  100,  101,  101,  141,   96,
      141,   94,   97,  141,   97,  171,  172,   97,   99,  141,
      173,  100,   97,  101,   97,   97,  141,   99,  174,   99,
      175,  176,   99,  177,   97,  141,  179,  141,   99,   97,
      141,   97,    0,  172,   97,   99,  141,  173,    0,   97,

        0,   97,   97,  141,   99,  174,   99,  175,  176,   99,
      177,   97,   98,  179,  180,   99,   98,  181,  182,   98,
       98,  185,  106,  105,  106,  105,   98,  106,  186,   98,
      187,  105,  106,  105,  106,  106,   98,  105,  105,   98,
        0,  180,    0,   98,  181,  182,   98,   98,  185,  106,
      105,  106,  105,   98,  106,  186,   98,  187,  105,  106,
      105,  106,  106,   98,  105,  105,  108,  111,  108,  111,
      183,  108,  189,  190,  183,  111,  108,  111,  108,  108,
      191,  111,  111,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  108,  111,  108,  111,  183,  108,  189,

      190,  183,  111,  108,  111,  108,  108,  191,  111,  111,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  138,  138,  138,  148,  138,  148,  169,  163,  169,
      148,    0,  192,    0,  193,  194,    0,  148,  163,  195,
      169,  148,    0,  163,  163,  184,  194,  196,  138,  138,
      138,  148,  138,  148,  169,  163,  169,  148,  184,  192,
      188,  193,  194,  184,  148,  163,  195,  169,  148,  188,
      163,  163,  184,  194,  196,  197,  199,  188,  198,  199,
      200,  201,  202,  204,  203,  184,  205,  188,  202,  206,

      184,  304,  307,  314,  316,  317,  188,  203,  198,    0,
        0,    0,  197,  199,  188,  198,  199,  200,  201,  202,
      204,  203,    0,  205,    0,  202,  206,    0,  304,  307,
      314,  316,  317,    0,  203,  198,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  223,  224,  224,
      225,  226,  319,    0,    0,    0,  227,    0,  226,  227,
      227,    0,  229,  321,  229,  225,  226,  223,  228,  224,
      225,  226,    0,    0,  223,  224,  224,  225,  226,  319,

      227,  228,  231,  227,  229,  226,  227,  227,  228,  229,
      321,  229,  225,  226,  223,  228,  224,  225,  226,  230,
      230,  230,  231,  232,  322,  323,    0,  227,  228,  231,
      232,  229,  233,  234,  230,  228,  233,  232,    0,  230,
      234,  234,  234,  232,  234,  235,  230,  230,  230,  231,
      232,  322,  323,  234,  324,  235,  233,  232,  236,  233,
      234,  230,  326,  233,  232,  235,  230,  234,  234,  234,
      232,  234,  235,  236,  238,  239,  240,  327,  236,    0,
      234,  324,  235,  233,    0,  236,  240,  238,  238,  326,
        0,  239,  235,    0,  238,  239,  240,    0,    0,    0,

      236,  238,  239,  240,  327,  236,  237,  243,  237,  243,
      237,  237,  241,  240,  238,  238,  328,  237,  239,  242,
      242,  238,  239,  240,  237,  256,  241,    0,  329,  243,
      237,    0,  241,  237,  243,  237,  243,  237,  237,  241,
      242,    0,  245,  328,  237,  256,  242,  242,  244,  245,
      244,  237,  256,  241,  244,  329,  243,  237,  247,  241,
      248,  244,  245,  330,  246,  244,    0,  242,  247,  245,
      244,  246,  256,  248,  331,  244,  245,  244,  247,  250,
      248,  244,  332,  249,  246,  247,  250,  248,  244,  245,
      330,  246,  244,  249,  251,  247,  333,  244,  246,  250,

      248,  331,  252,  249,  251,  247,  250,  248,    0,  332,
      249,  246,  252,  250,  251,  334,  254,  255,  253,    0,
      249,  251,  252,  333,  335,  254,  250,  336,  337,  252,
      249,  251,  253,  255,    0,  253,  254,  255,  253,  252,
        0,  251,  334,  254,  255,  253,  257,  258,    0,  252,
      257,  335,  254,  339,  336,  337,    0,    0,  258,  253,
      255,  260,  253,  254,  255,  253,  257,  258,  259,  259,
      260,  261,  262,  257,  258,  261,  340,  257,  259,    0,
      339,  260,    0,  259,  259,  258,  263,  263,  260,  259,
      341,  261,  262,  257,  258,  259,  259,  260,  261,  262,

      338,  264,  261,  340,  342,  259,  263,  264,  260,  264,
      259,  259,  266,  263,  263,  338,  259,  341,  261,  262,
      267,  264,  265,    0,  265,  266,  265,  338,  264,  267,
        0,  342,  266,  263,  264,  265,  264,  271,    0,  266,
      267,  268,  338,  269,  271,  270,  265,  267,  264,  265,
      268,  265,  266,  265,  343,  344,  267,  271,  269,  266,
      270,  268,  265,  269,  271,  270,  274,  267,  268,  346,
      269,  271,  270,  265,  272,  273,  273,  268,  272,  275,
      275,  343,  344,    0,  271,  269,  274,  270,  268,  276,
      269,    0,  270,  274,  306,  273,  346,  277,  272,  347,

      275,  272,  273,  273,  276,  272,  275,  275,  278,  276,
      277,  306,  278,  274,  279,    0,  276,  277,  279,    0,
        0,  306,  273,    0,  277,  272,  347,  275,  281,  280,
      281,  276,  278,  280,  279,  278,  276,  277,  306,  278,
      348,  279,  280,  282,  277,  279,  283,  280,  281,  283,
      282,    0,    0,  280,    0,  281,  280,  281,  285,  278,
      280,  279,  284,  282,  284,    0,  283,  348,  285,  280,
      282,  349,  350,  283,  280,  281,  283,  282,  285,  284,
      280,  287,  291,  286,  284,  285,  351,  286,  288,  284,
      282,  284,  288,  283,  287,  285,  292,  289,  349,  350,

      289,  287,  291,    0,  292,  285,  284,  286,  287,  291,
      286,  284,  288,  351,  286,  288,  292,  290,    0,  288,
      289,  287,  293,  292,  289,  290,  294,  289,  287,  291,
      294,  292,  352,  293,  286,  353,  290,  290,  354,  288,
        0,  295,  293,  292,  290,  295,  294,  289,  295,  293,
      294,    0,  290,  294,  297,  296,  296,  294,  297,  352,
      293,  295,  353,  290,  290,  354,  299,  300,  295,  293,
      355,  298,  295,  294,  297,  295,  296,  294,  298,  299,
      301,  297,  296,  296,  298,  297,  299,  300,  295,    0,
        0,  298,  302,  299,  300,  301,  302,  355,  298,  356,

      301,  297,  357,  296,  358,  298,  299,  301,  305,  359,
      360,  298,  361,  299,  300,  362,  302,  305,  298,  302,
      363,    0,  301,  302,  364,  305,  356,  301,    0,  357,
        0,  358,    0,    0,    0,  305,  359,  360,  365,  361,
      366,  367,  362,  302,  305,  368,  325,  363,  325,  370,
      371,  364,  305,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  325,  369,  365,  373,  366,  367,  374,
      375,  376,  368,  325,  369,  325,  370,  371,  377,  378,
      379,  380,  381,  382,  384,  385,  386,  387,  388,  389,
      325,  369,  390,  373,  391,  392,  374,  375,  376,  393,

      394,  369,  395,  396,  397,  377,  378,  379,  380,  381,
      382,  384,  385,  386,  387,  388,  389,  398,  399,  390,
      400,  391,  392,  402,  403,  404,  393,  394,  405,  395,
      396,  397,  406,  407,  408,  409,  410,  412,  414,  413,
      414,  415,  416,  417,  398,  399,  418,  400,  413,  419,
      402,  403,  404,  420,  421,  405,  423,  424,    0,  406,
      407,  408,  409,  410,  412,  414,  413,  414,  415,  416,
      417,  419,    0,  418,  422,  413,  419,  428,  422,  429,
      420,  421,  430,  423,  424,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  431,  432,  428,  419,  429,

      433,  422,  430,  432,  428,  422,  429,  434,  435,  430,
      539,  434,    0,  437,    0,  431,  432,  437,    0,    0,
      433,  438,  431,  432,  428,  439,  429,  433,  435,  430,
      432,  434,  439,  437,  434,  435,  436,  539,  434,  438,
      437,  438,  431,  432,  437,  439,  436,  433,  438,  442,
      542,    0,  439,    0,  441,  435,  436,    0,  434,  439,
      437,    0,  440,  436,  440,  442,  438,  441,  438,  442,
      443,    0,  439,  436,  441,    0,  442,  542,  443,  440,
      444,  441,  445,  436,  440,    0,    0,    0,  448,  440,
      443,  440,  442,    0,  441,  444,  442,  443,  447,  446,

      444,  441,  445,  446,  453,  443,  440,  444,  448,  445,
        0,  440,  447,  450,  449,  448,  543,  443,  447,  453,
      450,  544,  444,  446,  453,  447,  446,  444,  449,  445,
      446,  453,  451,  450,  449,  448,  451,  455,  452,  447,
      450,  449,  452,  543,    0,  447,  453,  450,  544,    0,
      446,  453,  451,  456,  454,  449,  454,  455,  459,  451,
      450,  449,  452,  451,  455,  452,  458,  457,  456,  452,
      457,  460,    0,  456,    0,    0,  454,  458,  459,  451,
      456,  454,  462,  454,  455,  459,  458,    0,  461,  452,
      457,  460,  461,  458,  457,  456,  464,  457,  460,  463,

      456,  463,  462,  454,  458,  459,    0,  465,  545,  462,
      464,  466,  461,  458,  465,  461,  464,  457,  460,  461,
      468,  463,  467,  464,  466,  470,  463,  465,  463,  462,
      546,  466,  547,  470,  465,  545,  467,  464,  466,  461,
      468,  465,  467,  464,  548,  470,  469,  468,  463,  467,
      469,  466,  470,    0,  465,  472,  471,  546,  466,  547,
      470,    0,  472,  467,  471,  473,  478,  468,  473,  467,
      469,  548,  470,  469,  474,  472,  471,  469,  475,  478,
      476,  475,  472,  471,  476,    0,  478,    0,  473,  472,
      474,  471,  473,  478,  474,  473,  481,  469,  475,  477,

      476,  474,  472,  471,  479,  475,  478,  476,  475,  482,
      479,  476,  480,  478,  477,  473,  481,  474,  483,  477,
      484,  474,  480,  481,  479,  475,  477,  476,  485,  482,
      484,  479,  480,  486,  487,    0,  482,  479,  483,  480,
      484,  477,  486,  481,  485,  483,  477,  484,  485,  480,
      489,  479,  550,  486,  487,  485,  482,  484,  488,  480,
      486,  487,  490,  491,  491,  483,  490,  484,  492,  486,
      489,  485,  492,  488,  493,  485,  493,  489,  488,  550,
      486,  487,  490,    0,  491,  488,  494,  496,  494,  490,
      491,  491,  492,  490,  493,  492,  495,  489,  498,  492,

      488,  493,  496,  493,  497,  488,  494,  496,    0,  490,
      499,  491,  495,  494,  496,  494,  495,  499,  498,  492,
      497,  493,  500,  495,  497,  498,  501,    0,  502,  496,
      499,  497,  503,  494,  496,  500,  553,  499,    0,  495,
      501,    0,  500,  495,  499,  498,  501,  497,  502,  500,
      504,  497,  503,  501,  504,  502,  505,  499,  507,  503,
      506,    0,  500,  553,  509,  505,  507,  501,  509,  500,
        0,  506,    0,  501,  504,  502,  505,  504,  507,  503,
      506,  504,  508,  505,  510,  507,  513,  506,  509,  508,
        0,  509,  505,  507,  511,  509,    0,  511,  506,  510,

      515,  504,  508,  505,  510,  507,  513,  506,  514,  508,
      512,  510,  517,  513,  511,  509,  508,  512,  514,  517,
      515,  511,  516,  518,  511,  554,  510,  515,  514,  508,
      512,  510,  517,  513,    0,  514,  519,  512,  518,  517,
      516,  511,  516,  518,  512,  514,  517,  515,    0,  516,
      518,  519,  554,  520,    0,  514,  519,  512,    0,  517,
      520,  521,  522,  519,  524,  518,  523,  516,    0,  516,
      518,  555,  521,  520,  525,  523,  526,  522,  519,    0,
      520,  521,  522,  519,  524,  526,  523,  520,  521,  522,
        0,  524,    0,  523,  525,  528,  526,  527,  555,  521,

      520,  525,  523,  526,  522,  528,  527,  528,  521,  522,
      529,  524,  526,  523,  530,  528,  531,  527,  530,  532,
      529,  525,  528,  526,  527,  531,  533,    0,  533,  556,
      529,  534,  528,  527,  528,  532,  531,  529,  530,  532,
        0,  530,  528,  531,  527,  530,  532,  529,  533,  534,
      558,  534,  531,  533,  535,  533,  556,  529,  534,  536,
      538,  559,  532,  531,  537,  530,  532,  537,  536,  535,
      560,  562,  536,  538,  535,  533,  534,  558,  534,  536,
      538,  535,  563,  564,  537,  565,  536,  538,  559,  566,
      567,  537,  568,  569,  537,  536,  535,  560,  562,  536,

      538,  535,  570,  573,  574,  575,  536,  538,  576,  563,
      564,  537,  565,  577,  578,  579,  566,  567,  581,  568,
      569,  582,  585,  586,  588,  590,  591,  592,  593,  570,
      573,  574,  575,  594,  595,  576,  596,  598,  602,  604,
      577,  578,  579,  606,  608,  581,  609,  596,  582,  585,
      586,  588,  590,  591,  592,  593,  607,  607,  611,  612,
      594,  595,  613,  596,  598,  602,  604,  614,  615,  617,
      606,  608,  618,  609,  596,  620,  621,  622,  623,  624,
      625,  626,  628,  607,  607,  611,  612,  629,  630,  613,
      631,  632,  635,  636,  614,  615,  617,  638,  639,  618,

      640,  641,  620,  621,  622,  623,  624,  625,  626,  628,
      642,  643,  644,  645,  629,  630,  646,  631,  632,  635,
      636,  648,  650,  652,  638,  639,  656,  640,  641,    0,
        0,  654,  655,    0,  657,    0,  764,  642,  643,  644,
      645,    0,  658,  646,  654,  655,  656,  659,  648,  650,
      652,  654,  655,  656,  657,  658,  659,  660,  654,  655,
      661,  657,  658,  764,  662,  663,  664,  659,  662,  658,
      768,  654,  655,  656,  659,    0,    0,  660,  654,  655,
      661,  657,  658,  659,  660,  663,  664,  661,  662,  658,
      666,  662,  663,  664,  659,  662,  665,  768,  666,  667,

      665,  668,  669,  667,  660,    0,    0,  661,    0,    0,
      666,    0,  663,  664,  668,  662,  670,  666,  671,  667,
      665,  668,  669,  665,  672,  666,  667,  665,  668,  669,
      667,  670,  671,  673,  676,  674,  670,  666,  671,  672,
        0,  668,  674,  670,  672,  671,  667,  665,  668,  669,
      676,  672,  677,  673,  676,  674,  675,    0,  670,  671,
      673,  676,  674,  670,  675,  671,  672,  677,  680,  674,
      680,  672,  677,  679,  678,  770,  675,  676,  678,  677,
      673,  676,  674,  675,  681,    0,  679,  683,  681,  682,
      680,  675,  684,  679,  677,  680,  682,  680,  678,  677,

      679,  678,  770,  675,  681,  678,  687,  683,  772,  682,
      685,  681,  684,  679,  683,  681,  682,  680,  686,  684,
      679,  685,  687,  682,  773,  678,  687,  688,  689,  686,
      685,  681,  689,  687,  683,  772,  682,  685,  686,  684,
      690,  691,  688,  692,  690,  686,    0,  688,  685,  687,
        0,  773,  689,  687,  688,  689,  686,  685,  693,  689,
      695,  691,  694,  692,  690,  686,  694,  690,  691,  688,
      692,  690,  696,  693,  688,  699,    0,  697,  693,  689,
      695,  697,    0,  698,  774,  693,  694,  695,  691,  694,
      692,  690,  696,  694,  698,  699,  701,  700,  702,  696,

      693,  697,  699,  698,  697,  693,  700,  695,  697,  703,
      698,  774,  702,  694,  704,  775,  701,  700,  702,  696,
      776,  698,  699,  701,  700,  702,    0,  704,  697,  703,
      698,  705,  709,  700,  704,  706,  703,    0,    0,  702,
      707,  704,  775,  701,  700,  702,  711,  776,  706,    0,
      705,  705,  709,  707,  704,  706,  703,    0,  705,  709,
      707,  704,  706,  708,  710,  708,  711,  707,  712,  713,
        0,  710,    0,  711,  715,  706,  708,  705,  705,  709,
      707,    0,  706,  708,  710,  714,  717,  707,  712,  713,
      708,  710,  708,  711,  715,  712,  713,  716,  710,  718,

      714,  715,    0,  708,  716,  714,  717,    0,  719,  722,
      708,  710,  714,  717,  777,  712,  713,  716,    0,  718,
      778,  715,  719,  719,  716,  721,  718,  714,  719,  722,
        0,  716,  714,  717,  720,  719,  722,  720,  721,  724,
      723,  777,  723,    0,  716,  721,  718,  778,    0,  719,
      719,    0,  721,    0,  720,  719,  722,  725,  726,  724,
      727,  720,  723,  728,  720,  721,  724,  723,  727,  723,
      725,  726,  721,  731,  732,  729,    0,  725,  726,  729,
      727,  720,  732,  728,  725,  726,  724,  727,  730,  723,
      728,  780,  730,  731,  732,  727,    0,  725,  726,  729,

      731,  732,  729,  733,  725,  726,  729,  727,  735,  732,
      728,  735,  730,  734,  736,  730,  733,  738,  780,  730,
      731,  732,  736,  733,    0,  739,  729,  737,  734,    0,
      733,  735,  739,  734,  736,  735,  737,  738,  735,  730,
      734,  736,  740,  733,  738,  739,    0,  737,  742,  736,
      733,  744,  739,  741,  737,  734,  743,  741,  735,  739,
      734,  736,  740,  737,  738,  745,  743,  746,  742,  740,
        0,  744,  739,  741,  737,  742,  743,  747,  744,  748,
      741,  746,    0,  743,  741,  745,    0,  746,  749,  740,
      749,  747,  745,  743,  746,  742,  750,  747,  744,  748,

      741,    0,    0,  743,  747,  750,  748,  752,  746,  751,
      749,  752,  745,  753,  746,  749,  750,  749,  747,  754,
        0,  754,  755,  750,  747,  751,  748,  756,  753,  751,
      756,  752,  750,  753,  752,    0,  751,  749,  752,  754,
      753,  757,  755,  750,  758,  757,  754,  756,  754,  755,
      760,  781,  751,  761,  756,  753,  751,  756,  752,  759,
      753,  757,  762,  782,  758,  783,  754,  763,  757,  755,
      760,  758,  757,  761,  756,  759,  784,  760,  781,  759,
      761,  763,  762,  786,  787,  788,  759,  763,  757,  762,
      782,  758,  783,  789,  763,  790,  791,  760,  792,  793,

      761,  794,  759,  784,  795,  798,  759,  799,  763,  762,
      786,  787,  788,  801,  763,  804,  807,  808,  809,  810,
      789,  809,  790,  791,  815,  792,  793,  816,  794,  817,
      818,  795,  798,  819,  799,  822,  823,  824,  825,  826,
      801,  828,  804,  807,  808,  809,  810,  829,  809,  830,
      831,  815,  832,  833,  816,  834,  817,  818,  835,  836,
      819,  837,  822,  823,  824,  825,  826,  838,  828,  839,
      841,  842,  843,  845,  829,  846,  830,  831,  847,  832,
      833,  848,  834,  852,  853,  835,  836,  855,  837,  856,
        0,    0,  854,  936,  838,  857,  839,  841,  842,  843,

      845,  858,  846,  852,  853,  847,  938,  855,  848,  856,
      852,  853,  854,  854,  855,  857,  856,  859,  859,  854,
      936,  858,  857,  861,  860,    0,  860,  864,  858,    0,
      852,  853,  861,  938,  855,  865,  856,  862,  859,  854,
      854,    0,  857,  861,  859,  859,  860,  864,  858,    0,
      861,  860,  862,  860,  864,  865,  863,  862,  867,  861,
        0,  940,  865,    0,  862,  859,  863,  866,  867,    0,
      861,  866,  870,  860,  864,    0,  863,  868,  867,  862,
      871,  868,  865,  863,  862,  867,  872,  866,  940,  869,
      872,  941,  870,  863,  866,  867,  869,  942,  866,  870,

      871,  868,  874,  863,  868,  867,  872,  871,  868,  869,
      873,  874,  875,  872,  866,  876,  869,  872,  941,  870,
        0,  943,  874,  869,  942,  873,  877,  871,  868,  874,
      873,  879,  875,  872,  945,  876,  869,  873,  874,  875,
      878,  877,  876,  880,  882,  879,  877,  880,  943,  874,
        0,  879,  873,  877,  881,  878,  881,  873,  879,  875,
      878,  945,  876,  880,  882,  883,  947,  878,  877,  884,
      880,  882,  879,  877,  880,  886,  881,  888,  879,  885,
      948,  881,  878,  881,  884,  883,  885,  878,  889,  884,
      880,  882,  883,  947,  890,  886,  884,  888,  887,  885,

      887,  949,  886,  881,  888,    0,  885,  948,  889,  890,
      891,  884,  883,  885,  890,  889,  884,    0,  887,  892,
      894,  890,  886,  893,  888,  887,  885,  887,  949,  950,
      891,  952,  897,  898,  895,  889,  890,  891,  893,  892,
      894,  890,  896,  893,  899,  887,  892,  894,  895,  896,
      893,  895,  897,  898,  895,    0,  950,  891,  952,  897,
      898,  895,  896,  900,  899,  893,  892,  894,  901,  896,
      893,  899,  902,  903,  906,  895,  896,  903,  895,  897,
      898,  895,  904,  900,    0,  904,  902,  907,  901,  896,
      900,  899,  902,    0,  906,  901,  905,  903,  908,  902,

      903,  906,  904,    0,  903,    0,    0,  907,  911,  904,
      900,  905,  904,  902,  907,  901,  905,  909,  908,  902,
      910,  906,  912,  905,  903,  908,  912,  954,  911,  904,
      909,  913,  914,  910,  907,  911,  914,  909,  905,    0,
      910,    0,  912,  905,  909,  908,  915,  910,  917,  912,
      915,  913,  917,  912,  954,  911,  914,  909,  913,  914,
      910,  916,  916,  914,  909,  918,  918,  910,  917,  912,
      915,  920,  919,  915,  921,  917,  919,  915,  913,  917,
      923,    0,  916,  914,  923,  920,  918,  921,  916,  916,
      922,  920,  918,  918,  921,  917,  919,  915,  920,  919,

      925,  921,  924,  919,  923,  922,  924,  923,  926,  916,
      922,  923,  920,  918,  921,  927,  927,  922,  920,  928,
      925,  921,    0,  919,  929,  958,  924,  925,  926,  924,
      934,  923,  922,  924,  930,  926,  927,  922,    0,  928,
      932,  931,  927,  927,  929,  931,  928,  925,  930,  932,
      934,  929,  958,  924,  930,  926,  960,  934,  933,  935,
      932,  930,  933,  927,  961,  931,  928,  932,  931,  967,
      968,  929,  931,  969,  971,  930,  932,  934,  973,  935,
      974,  930,  933,  960,  976,  933,  935,  932,  977,  933,
      978,  961,  931,  980,  981,  982,  967,  968,  983,  985,

      969,  971,  987,  989,  990,  973,  935,  974,  991,  933,
      992,  976,  997,  998,  999,  977, 1001,  978, 1002,    0,
      980,  981,  982,    0, 1003,  983,  985, 1004, 1007,  987,
      989,  990, 1006, 1003,    0,  991, 1001,  992, 1002,  997,
      998,  999, 1005, 1001, 1003, 1002, 1006, 1004, 1007,    0,
     1009, 1003, 1006,    0, 1004, 1007, 1010, 1005, 1067, 1006,
     1003, 1008, 1005, 1001, 1010, 1002,    0, 1013, 1008, 1005,
     1009, 1003, 1014, 1006, 1004, 1007, 1010, 1009, 1011, 1006,
     1011, 1008, 1013, 1010, 1005, 1067, 1012, 1013, 1008, 1005,
     1016, 1010, 1014, 1012, 1013, 1008, 1018, 1009, 1015, 1014,

     1011, 1015, 1017, 1010, 1017, 1011, 1012, 1011, 1008, 1013,
     1016,    0, 1019, 1012, 1013, 1020, 1018, 1016, 1021, 1014,
     1012, 1015,    0, 1018, 1017, 1015, 1022, 1011, 1015, 1017,
     1025, 1017, 1019, 1012,    0, 1020, 1070, 1016, 1021, 1019,
     1023, 1024, 1020, 1018, 1026, 1021, 1022,    0, 1015, 1023,
     1025, 1017, 1027, 1022, 1028, 1029, 1024, 1025, 1031, 1019,
     1023, 1024, 1020, 1070, 1026, 1021,    0, 1023, 1024, 1033,
     1071, 1026, 1027, 1022, 1028, 1029, 1023, 1025, 1031, 1027,
     1030, 1028, 1029, 1024, 1034, 1031, 1032, 1023, 1024, 1033,
     1032, 1026, 1035, 1030,    0, 1074, 1033, 1071, 1034, 1027,

     1030, 1028, 1029, 1038, 1034, 1031, 1039, 1030, 1036, 1040,
     1032, 1034, 1035, 1032, 1037, 1036, 1033, 1032, 1037, 1035,
     1030, 1039, 1074, 1038, 1041, 1034, 1039, 1030, 1036, 1040,
     1038, 1034, 1042, 1039,    0, 1036, 1040, 1032, 1037, 1035,
     1075, 1037, 1036, 1045, 1041, 1037,    0, 1043, 1039, 1043,
     1038, 1041, 1042, 1039,    0, 1036, 1040, 1045, 1044, 1042,
     1044, 1046, 1080, 1045,    0, 1037,    0, 1075, 1081, 1043,
     1045, 1041, 1048, 1047, 1043, 1046, 1043, 1050, 1084, 1042,
     1044, 1046, 1047,    0, 1045, 1044,    0, 1044, 1046, 1080,
     1045, 1049, 1048, 1047,    0, 1081, 1043, 1050, 1049, 1048,

     1047, 1055, 1046,    0, 1050, 1084, 1051, 1044, 1046, 1047,
     1051, 1049, 1052, 1053, 1054, 1053, 1052, 1085, 1049, 1048,
     1047, 1055, 1088, 1089, 1050, 1049, 1056, 1057, 1055, 1054,
     1051, 1058, 1059, 1051, 1054, 1053, 1052, 1051, 1049, 1052,
     1053, 1054, 1053, 1052, 1085, 1059, 1056, 1057, 1055, 1088,
     1089, 1058, 1059, 1056, 1057, 1092, 1054, 1051, 1058, 1059,
     1061, 1054, 1053, 1052, 1060, 1094, 1060, 1061, 1095, 1096,
     1097,    0, 1059, 1056, 1057,    0,    0,    0, 1058, 1059,
     1061, 1102, 1092, 1103, 1060, 1104, 1105, 1061,    0, 1106,
        0, 1060, 1094, 1060, 1061, 1095, 1096, 1097, 1107, 1108,

     1109, 1102, 1110, 1103, 1109, 1104, 1105, 1061, 1102, 1106,
     1103, 1060, 1104, 1105, 1111, 1112, 1106, 1114, 1107, 1108,
     1115,    0, 1110, 1113, 1109, 1107, 1108, 1109, 1102, 1110,
     1103, 1109, 1104, 1105, 1111, 1112, 1106, 1114, 1113, 1116,
     1115, 1111, 1112, 1113, 1114, 1107, 1108, 1115, 1117, 1110,
     1113, 1109, 1118, 1119, 1118,    0, 1120, 1121, 1122, 1116,
     1119, 1111, 1112,    0, 1114, 1113, 1116, 1115, 1117, 1123,
     1113, 1122, 1124, 1119, 1118, 1117, 1120, 1121, 1122, 1118,
     1119, 1118, 1125, 1120, 1121, 1122, 1116, 1119, 1127, 1123,
     1128, 1126, 1124, 1129, 1127, 1117, 1123, 1140, 1122, 1124,

     1119, 1118, 1125, 1120, 1121, 1122, 1126, 1130, 1127, 1125,
     1128, 1126, 1131, 1129,    0, 1127, 1123, 1128, 1126, 1124,
     1129, 1127, 1130, 1132, 1140,    0, 1134, 1130, 1135, 1125,
     1142, 1136, 1131, 1126, 1130, 1127, 1132, 1128, 1126, 1131,
     1129, 1134, 1137, 1132, 1133, 1138, 1134, 1145, 1135, 1130,
     1132, 1136, 1133, 1134, 1130, 1135, 1148, 1142, 1136, 1131,
     1152, 1153, 1137, 1132, 1133, 1138, 1154,    0, 1134, 1137,
     1132, 1133, 1138, 1134, 1145, 1135, 1158, 1157, 1136, 1133,
     1159, 1160, 1161, 1148,    0, 1163,    0, 1152, 1153, 1137,
     1157, 1133, 1138, 1154, 1164, 1159, 1158, 1157, 1162,    0,

     1159, 1160, 1161, 1158, 1157, 1163, 1165, 1159, 1160, 1161,
     1166, 1167, 1163, 1162, 1164, 1168, 1169, 1157, 1162, 1165,
     1175, 1164, 1159, 1158, 1157, 1162, 1165, 1159, 1160, 1161,
     1166, 1167, 1163, 1165, 1172, 1168, 1169, 1166, 1167, 1170,
     1162, 1164, 1168, 1169, 1171, 1162, 1165, 1175, 1171, 1177,
     1170, 1180, 1182, 1165, 1172,    0,    0, 1166, 1167, 1170,
     1183, 1172, 1168, 1169, 1171, 1184, 1170, 1192, 1185, 1186,
     1187, 1171, 1182, 1188,    0, 1171, 1177, 1170, 1180, 1182,
     1183, 1172, 1185, 1188, 1194, 1184, 1170, 1183, 1185, 1186,
     1187, 1171, 1184, 1188, 1192, 1185, 1186, 1187, 1195, 1182,

     1188, 1200,    0,    0, 1194,    0,    0, 1183,    0, 1185,
     1188, 1194, 1184, 1196,    0, 1185, 1186, 1187, 1195,    0,
     1188, 1200, 1196,    0,    0, 1195,    0,    0, 1200,    0,
        0, 1194,    0, 1196,    0,    0,    0,    0,    0,    0,
     1196,    0,    0,    0,    0, 1195,    0,    0, 1200, 1196,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1196, 1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221, 1221,
     1221, 1222,    0,    0, 1222, 1222, 1224, 1224, 1224,    0,
     1224, 1225,    0, 1225, 1225, 1225, 1226,    0, 1226, 1226,
     1226, 1227,    0, 1227, 1227, 1227, 1228,    0,    0, 1228,

     1228, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2177 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2191 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2
#define WITH 3
#define WITH_DESC 4
#define CAST 5
#define CAST_EXPR 6
#define SELECT 7
#define SELECT_AS 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 58 "flex_lexer.l"


#line 2484 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1220 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1219 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 64 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CHARACTER)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VARYING)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
{ BEGIN(CAST); return SQL_CAST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
{ BEGIN(SELECT); return SQL_SELECT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
{ BEGIN(INITIAL); return SQL_SELECT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
{ BEGIN(WITH); return SQL_WITH; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{ BEGIN(SELECT_AS); return SQL_AS; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 155:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(COMMA)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{ BEGIN(INITIAL); return SQL_SEMICOLON;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(PAREN_OPEN)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(PAREN_CLOSE)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ BEGIN(CAST_EXPR); return SQL_PAREN_OPEN; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ BEGIN(INITIAL); return SQL_PAREN_CLOSE; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ BEGIN(WITH_DESC); return SQL_PAREN_OPEN; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN(WITH); return SQL_PAREN_CLOSE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 170:
#line 236 "flex_lexer.l"
case 171:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 172:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 267 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 272 "flex_lexer.l"
{
  BEGIN(INITIAL);
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{
  BEGIN(INITIAL);
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 285 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 286 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 287 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 288 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 289 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 291 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 293 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3492 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(WITH):
case YY_STATE_EOF(WITH_DESC):
case YY_STATE_EOF(CAST):
case YY_STATE_EOF(CAST_EXPR):
case YY_STATE_EOF(SELECT):
case YY_STATE_EOF(SELECT_AS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1220 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1220 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1219);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 293 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

